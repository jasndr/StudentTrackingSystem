@*@model StudentTrackingSystem3.Models.Student*@
@using MvcCheckBoxList.Model
@model StudentTrackingSystem3.ViewModels.UltimateViewModel

@{
    ViewBag.Title = "Student Profile";
}

<h2>Graduate Student Profile</h2>
<br />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div>
        <form>
            <h4>Profile details of <strong>@Html.DisplayFor(model => model.Student.FirstName) @Html.DisplayFor(model => model.Student.LastName)</strong></h4>

            <br />
            <div class="row menuNav" id="menuNav_background">
                @Html.ActionLink("Profile", "Edit", "Student", new { id = Model.Student.Id }, new { @class = "btn btn-primary infoNav menuNav_background col-md-2 col-xs-12" })

                @Html.ActionLink("Coursework", "Index", "Coursework", new { id = Model.Student.Id }, new { @class = "btn btn-primary infoNav menuNav_coursework col-md-2 col-xs-12", @onclick = "javascript:return false;", @disabled = true })

                @Html.ActionLink("Performance and Activity", "Index", "Performance", new { id = Model.Student.Id }, new { @class = "btn btn-primary infoNav menuNav_performance col-md-2 col-xs-12" })

                @Html.ActionLink("Requirements", "Index", "Graduation", new { id = Model.Student.Id }, new { @class = "btn btn-primary infoNav menuNav_graduation col-md-2 col-xs-12" })

                @Html.ActionLink("Post-Graduation", "Index", "PostGraduation", new { id = Model.Student.Id }, new { @class = "btn btn-primary infoNav menuNav_postgrad col-md-2 col-xs-12" })
            </div>

            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Student.Id)



            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.StudentNumber, htmlAttributes: new { @class = "control-label col-md-5 requiredLabel" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.StudentNumber, new { htmlAttributes = new { @class = "form-control guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.StudentNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <br />

            <div class="row">
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.FirstName, htmlAttributes: new { @class = "control-label col-md-5 requiredLabel" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.FirstName, new { htmlAttributes = new { @class = "form-control guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.MiddleName, htmlAttributes: new { @class = "control-label col-md-5" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.MiddleName, new { htmlAttributes = new { @class = "form-control guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.MiddleName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.LastName, htmlAttributes: new { @class = "control-label col-md-5 requiredLabel" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.LastName, new { htmlAttributes = new { @class = "form-control guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <br />

            <div class="row">
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.SchoolEmail, htmlAttributes: new { @class = "control-label col-md-5 requiredLabel" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.SchoolEmail, new { htmlAttributes = new { @class = "form-control guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.SchoolEmail, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.OtherEmail, htmlAttributes: new { @class = "control-label col-md-5" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.OtherEmail, new { htmlAttributes = new { @class = "form-control guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.OtherEmail, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.Phone, htmlAttributes: new { @class = "control-label col-md-5 requiredLabel" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.Phone, new { htmlAttributes = new { @class = "form-control phoneNum guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.Phone, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <br />

            <div class="row">
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.GendersId, htmlAttributes: new { @class = "control-label col-md-5 requiredLabel" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.DropDownListFor(m => m.Student.GendersId, (SelectList)ViewBag.GendersIdBag, "-- Select Gender --", new { @class = "form-control guestDisabled" })
                            @Html.ValidationMessageFor(model => model.Student.GendersId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-8 col-xs-12">
                    <div class="form-group">

                        <div class="row">
                            @Html.LabelFor(model => model.Student.PreviousDegrees, htmlAttributes: new { @class = "control-label col-md-5" })
                            <div class="text-center">
                                @Html.ActionLink("Add Degree", "Create", "PrevDegree", new { id = Model.Student.Id }, htmlAttributes: new { @class = "guestHidden" })
                            </div>
                        </div>

                        <div class="col-md-10 row">
                            @{if (!object.ReferenceEquals(Model.Student.PreviousDegrees.FirstOrDefault(), null))
                                {
                                    <table class="table">

                                        @foreach (var item in Model.Student.PreviousDegrees.OrderByDescending(s => s.DateOfAward))
                                        {
                                            <tr>
                                                <td>&bull;</td>
                                                <td></td>
                                                <td><strong>@Html.DisplayFor(modelItem => item.DegreeTypes.Name)</strong>   @Html.DisplayFor(modelItem => item.Title)</td>
                                                <td>@Html.DisplayFor(modelItem => item.SchoolName)</td>
                                                <td>@Convert.ToString(string.Format("{0:yyyy}", item.DateOfAward))</td>
                                                <td>@Html.ActionLink("Edit", "Edit", "PrevDegree", new { id = item.Id }, new { @class = "btn btn-xs navbuttons guestHidden biostatHidden", @style = "background-color: #060; color: #FFF;" })</td>
                                                <td>
                                                    <a title="Delete" href="@Url.Action("Delete", "PrevDegree", new {id = item.Id})" class="guestHidden biostatHidden adminHidden" onclick="return confirm('Are you sure you want to delete this entry?');">
                                                        <span class="glyphicon glyphicon-trash"></span>
                                                    </a>
                                                </td>
                                            </tr>
                                        }
                                    </table>
                                }
                                else
                                {
                                    <p><em>No degrees listed.  <span class="guestHidden">Please add a degree.</span></em></p>
                                }
                            }

                        </div>
                    </div>
                </div>
            </div>

            <br />

            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.Age, htmlAttributes: new { @class = "control-label col-md-5" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.Age, new { htmlAttributes = new { @class = "form-control guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.Age, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <br />


            <div class="row">

                <div class="col-md-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.PersonRaces, htmlAttributes: new { @class = "control-label col-md-5 requiredLabel" })
                        </div>
                        <div class="row">

                            @{
                                var htmlListInfo = new HtmlListInfo(HtmlTag.table, 7, new { @class = "styled_list" }, TextLayout.Default, TemplateIsUsed.Yes);
                                @Html.CheckBoxListFor(model => model.RacesViewModel.PostedRaces.RaceIDs,
                                                              model => model.RacesViewModel.AvailableRaces,
                                                               race => race.Id,
                                                               race => race.Name,
                                                              model => model.RacesViewModel.SelectedRaces,
                                                              htmlListInfo, x => new { @class = "list_chkbx guestDisabled" })


                            }
                        </div>
                    </div>
                </div>

            </div>

            <div class="row">

                <div class="col-md-4">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.RaceOther, htmlAttributes: new { @class = "control-label col-md-5 raceOther" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.RaceOther, new { htmlAttributes = new { @class = "form-control raceOther guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.RaceOther, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.RaceAsianOther, htmlAttributes: new { @class = "control-label col-md-5 raceAsianOther" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.RaceAsianOther, new { htmlAttributes = new { @class = "form-control raceAsianOther guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.RaceAsianOther, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.RacePacIsleOther, htmlAttributes: new { @class = "control-label col-md-5 racePacIsleOther" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.RacePacIsleOther, new { htmlAttributes = new { @class = "form-control racePacIsleOther guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.RacePacIsleOther, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

            </div>

            <br />

            <div class="row">
                <div class="col-md-2 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.CitizenshipStatsId, htmlAttributes: new { @class = "control-label col-md-5 requiredLabel" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.DropDownListFor(m => m.Student.CitizenshipStatsId, (SelectList)ViewBag.CitizenshipStatsIdBag, "-- Select Citizenship Status --", new { @class = "form-control guestDisabled" })
                            @Html.ValidationMessageFor(model => model.Student.CitizenshipStatsId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                @*/** RESERVED for CV/Resume **/ *@
                <div class="col-md-5 col-xs-12">
                    <div class="form-group">

                        <div class="row">

                            <p>@Html.ActionLink("Add CV/Resume", "Create", "CurriculumVitae", new { id = Model.Student.Id, pageFrom = 1 }, null)</p>

                            @{IQueryable<StudentTrackingSystem3.Models.File> studentCVs = ViewBag.StudentCVs;}

                            @{if (!object.ReferenceEquals(studentCVs.Where(g => g.FileType == FileType.CurriculumVitae).FirstOrDefault(), null))
                                {
                                    var count = 1;
                                    foreach (var file in studentCVs.Where(g => g.FileType == FileType.CurriculumVitae).OrderByDescending(g => g.FileId))
                                    {
                                        if (count == 1)
                                        {
                                            <div class="col-md-offset-1">
                                                <div style="border: 1px solid #000; border-radius: 5px; display: inline-block; padding: 5px;">
                                                    <em><strong>Current CV/Resume</strong></em>
                                                    <ul>
                                                        <li>
                                                            <a href="~/File?id=@file.FileId">@file.FileName</a>  &mdash;
                                                            @Html.ActionLink("Edit", "Edit", "CurriculumVitae", new { id = file.FileId, pageFrom = 1 }, new { @class = "btn btn-xs navbuttons", @style = "background-color: #060; color: #FFF" })
                                                            <a style="margin-left: 5px" title="Delete" href="@Url.Action("Delete", "CurriculumVitae", new {id = file.FileId})" class="btn-btn-warning" onclick="return confirm('Are you sure you want to delete this entry?');">
                                                                <span class="glyphicon glyphicon-trash"></span>
                                                            </a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                            <br />
                                        }
                                        else
                                        {
                                            if (count == 2)
                                            {
                                                <p class="col-md-offset-1"><em><strong>CV/Resume History</strong></em></p>
                                            }
                                            <div class="col-md-offset-1">
                                                <ul>
                                                    <li>

                                                        <a href="~/File?id=@file.FileId">@file.FileName</a>  &mdash;
                                                        @Html.ActionLink("Edit", "Edit", "CurriculumVitae", new { id = file.FileId, pageFrom = 1 }, new { @class = "btn btn-xs navbuttons", @style = "background-color: #060; color: #FFF" })
                                                        <a style="margin-left: 5px" title="Delete" href="@Url.Action("Delete", "CurriculumVitae", new {id = file.FileId})" class="btn-btn-warning" onclick="return confirm('Are you sure you want to delete this entry?');">
                                                            <span class="glyphicon glyphicon-trash"></span>
                                                        </a>
                                                    </li>
                                                </ul>
                                            </div>
                                        }
                                        count++;
                                    }
                                }
                            }


                        </div>
                    </div>
                </div>
                <div class="col-md-5 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.EmploymentStatsId, htmlAttributes: new { @class = "control-label col-md-5 requiredLabel" })
                        </div>
                        <div class="col-md-12 row">
                            @Html.DropDownListFor(m => m.Student.EmploymentStatsId, (SelectList)ViewBag.EmploymentStatsIdBag, "-- Select Employment Status--", new { @class = "form-control guestDisabled" })
                            @Html.ValidationMessageFor(model => model.Student.EmploymentStatsId, "", new { @class = "text-danger" })
                        </div>
                        <br /><br />
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.EmploymentStatsOther, new { htmlAttributes = new { @class = "form-control guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.EmploymentStatsOther, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

            </div>
            <br />

            <div class="row">
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.DegreeProgramsId, htmlAttributes: new { @class = "control-label col-md-5 requiredLabel" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.DropDownListFor(m => m.Student.DegreeProgramsId, (SelectList)ViewBag.DegreeProgramsIdBag, "-- Select Program --", new { @class = "form-control guestDisabled" })
                            @Html.ValidationMessageFor(model => model.Student.DegreeProgramsId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.TracksId, htmlAttributes: new { @class = "control-label col-md-5" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.DropDownListFor(m => m.Student.TracksId, (SelectList)ViewBag.TracksIdBag, "-- Select Track --", new { @class = "form-control guestDisabled" })
                            @Html.ValidationMessageFor(model => model.Student.TracksId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.PlansId, htmlAttributes: new { @class = "control-label col-md-5" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.DropDownListFor(m => m.Student.PlansId, (SelectList)ViewBag.PlansIdBag, "-- Select Plan --", new { @class = "form-control guestDisabled" })
                            @Html.ValidationMessageFor(model => model.Student.PlansId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <br />

            <div class="row">
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.InterimAdvisorsId, htmlAttributes: new { @class = "control-label col-md-10" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.DropDownListFor(m => m.Student.InterimAdvisorsId, (SelectList)ViewBag.MsctrFacultyIdBag2, "-- Select MSCTR Faculty --", new { @class = "form-control guestDisabled" })
                            @Html.ValidationMessageFor(model => model.Student.InterimAdvisorsId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.PermanentAdvisorsId, htmlAttributes: new { @class = "control-label col-md-10" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.DropDownListFor(m => m.Student.PermanentAdvisorsId, (SelectList)ViewBag.MsctrFacultyIdBag, "-- Select MSCTR Faculty --", new { @class = "form-control guestDisabled" })
                            @Html.ValidationMessageFor(model => model.Student.PermanentAdvisorsId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.PermanentAdvisorOther, htmlAttributes: new { @class = "control-label col-md-10" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.PermanentAdvisorOther, new { htmlAttributes = new { @class = "form-control guestReadOnly permanentAdvisorOther" } })
                            @Html.ValidationMessageFor(model => model.Student.PermanentAdvisorOther, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <br />

            <div class="row">
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.DegreeStartSemsId, htmlAttributes: new { @class = "control-label col-md-10 requiredLabel" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.DropDownListFor(m => m.Student.DegreeStartSemsId, (SelectList)ViewBag.DegreeStartSemsIdBag, "-- Select Semester --", new { @class = "form-control guestDisabled" })
                            @Html.ValidationMessageFor(model => model.Student.DegreeStartSemsId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.Student.DegreeStartYear, htmlAttributes: new { @class = "control-label col-md-10 requiredLabel" })
                        </div>
                        <div class="col-md-10 row">
                            @Html.EditorFor(model => model.Student.DegreeStartYear, new { htmlAttributes = new { @class = "form-control guestReadOnly" } })
                            @Html.ValidationMessageFor(model => model.Student.DegreeStartYear, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <br />


            @{
                Graduation graduation = Model.Student.Graduation.FirstOrDefault();

                if (graduation != null)
                {
                    if (graduation.DegreeEndSems != null && graduation.DegreeEndYear != null)
                    {
                        <div class="row">
                            <div class="col-md-4 col-xs-12">
                                <div class="form-group">
                                    <div class="row">
                                        @Html.LabelFor(model => model.Student.Graduation.FirstOrDefault().DegreeEndSemsId, htmlAttributes: new { @class = "control-label col-md-10" })
                                    </div>
                                    <div class="col-md-10 row">
                                        @Html.EditorFor(m => m.Student.Graduation.FirstOrDefault().DegreeEndSems.Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.Student.Graduation.FirstOrDefault().DegreeEndSemsId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 col-xs-12">
                                <div class="form-group">
                                    <div class="row">
                                        @Html.LabelFor(model => model.Student.Graduation.FirstOrDefault().DegreeEndYear, htmlAttributes: new { @class = "control-label col-md-10" })
                                    </div>
                                    <div class="col-md-10 row">
                                        @Html.EditorFor(model => model.Student.Graduation.FirstOrDefault().DegreeEndYear, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.Student.Graduation.FirstOrDefault().DegreeEndYear, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <br />
                    }

                }
            }


            <div class="row">
                <div class="col-md-4 col-xs-12">
                    <div class="form-group">
                        <div class="col-md-10 row">
                            <input type="submit" value="Save" class="btn btn-default guestHidden createOrEditPost editPost" />
                        </div>
                    </div>
                </div>
            </div>

        </form>
    </div>
}
@*<br />
    <div>
        @Html.ActionLink("Back to List of Students", "Index", new { id = Model.Student.Id })
    </div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@Html.Raw(TempData["msg"])