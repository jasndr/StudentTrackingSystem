@model StudentTrackingSystem3.Models.G_PostGraduation

@{
    ViewBag.Title = "Editing Post-Graduation Student Record";
}

<h2>Post-Graduation Student Tracking</h2>
<br />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Editing post-graduation student record for <strong>@Model.Student.FirstName @Model.Student.LastName</strong></h4>
        <br />

        <div class="row menuNav" id="menuNav_postgrad">
            @Html.ActionLink("Background", "Edit", "Student", new { id = Model.StudentID }, new { @class = "btn btn-primary infoNav menuNav_background col-md-2 col-xs-12" })

            @Html.ActionLink("Coursework", "Index", "Coursework", new { id = Model.StudentID }, new { @class = "btn btn-primary infoNav menuNav_coursework col-md-2 col-xs-12" })

            @Html.ActionLink("Performance & Activity", "Index", "Performance", new { id = Model.StudentID }, new { @class = "btn btn-primary infoNav menuNav_performance col-md-2 col-xs-12" })

            @Html.ActionLink("Graduation", "Index", "Graduation", new { id = Model.StudentID }, new { @class = "btn btn-primary infoNav menuNav_graduation col-md-2 col-xs-12" })

            @Html.ActionLink("Post-Graduation", "Index", "PostGraduation", new { id = Model.StudentID }, new { @class = "btn btn-primary infoNav menuNav_postgrad col-md-2 col-xs-12" })
        </div>

        <hr />
        <br />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group" style="display: none;">
            @Html.LabelFor(model => model.StudentID, htmlAttributes: new { @class = "control-label" })
            <br />
            <div class="col-md-10">
                @Html.EditorFor(model => model.StudentID, new { htmlAttributes = new { @class = "form-control", @Value = Model.StudentID } })
                @Html.ValidationMessageFor(model => model.StudentID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">

            <div class="col-md-offset-1 col-md-4 col-xs-12">

                <div class="form-group">
                    @Html.LabelFor(model => model.Student.StudentNumber, htmlAttributes: new { @class = "control-label" })
                    <br />
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Student.StudentNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @Value = Model.Student.StudentNumber } })
                        @Html.ValidationMessageFor(model => model.Student.StudentNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

        </div>
        <br />

        <h4><strong><u>Contact Information</u></strong></h4>

        <div class="row">

            <div class="col-md-offset-1 col-md-4 col-xs-12">

                <div class="form-group">
                    <label class="control-label">Email</label>
                    <br />
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Student.OtherEmail, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @Value = Model.Student.OtherEmail } })
                        @Html.ValidationMessageFor(model => model.Student.OtherEmail, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

            <div class="col-md-4 col-xs-12">

                <div class="form-group">
                    @Html.LabelFor(model => model.Student.Phone, htmlAttributes: new { @class = "control-label" })
                    <br />
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Student.Phone, new { htmlAttributes = new { @class = "form-control phoneNum", @readonly = "readonly", @Value = Model.Student.Phone } })
                        @Html.ValidationMessageFor(model => model.Student.Phone, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

        </div>
        <br />

        <h4><strong><u>Upload updated CV</u></strong></h4>

        <div class="row">

            <div class="col-md-offset-1">

                <div class="form-group">

                    <div class="row">

                        @{IQueryable<G_File> studentCVs = ViewBag.StudentCVs;}

                        @{if (!object.ReferenceEquals(studentCVs.Where(g => g.FileType == G_FileType.CurriculumVitae).FirstOrDefault(), null))
                            {
                                foreach (var file in studentCVs)
                                {
                                    if (file.FileType == StudentTrackingSystem3.Models.G_FileType.CurriculumVitae)
                                    {
                                        <p>
                                            &bull; <a href="~/File?id=@file.G_FileId">@file.FileName</a>&mdash;
                                            @Html.ActionLink("Edit", "Edit", "CurriculumVitae", new { id = file.G_FileId }, new { @class = "btn btn-xs navbuttons", @style = "background-color: #060; color: #FFF" })
                                        </p>
                                    }
                                }
                            }
                            else
                            {
                                <p>@Html.ActionLink("Add Curriculum Vitae", "Create", "CurriculumVitae", new { id = Model.StudentID }, null)</p>
                            }
                        }


                    </div>
                </div>

            </div>

        </div>

        <br />

        <h4><strong><u>Current Employment</u></strong></h4>

        <div class="row">

            <div class="col-md-offset-1 col-md-4 col-xs-12">

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentPosition, htmlAttributes: new { @class = "control-label" })
                    <br />
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CurrentPosition, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CurrentPosition, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

            <div class="col-md-2 col-xs-12">

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentStartMonthId, htmlAttributes: new { @class = "control-label" })
                    <br />
                    <div class="col-md-10">
                        @Html.DropDownList("CurrentStartMonthId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CurrentStartMonthId, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

            <div class="col-md-2 col-xs-12">

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentStartYear, htmlAttributes: new { @class = "control-label" })
                    <br />
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CurrentStartYear, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CurrentStartYear, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

        </div>
        <br />

        <h4><strong><u>Previous Employment</u></strong></h4>

        <div class="row">
            <div class="form-group">

                <div class="row">
                    <div class="col-md-offset-1">
                        @Html.ActionLink("Add Previous Employment History", "Create", "PreviousEmployment", new { id = Model.StudentID }, null)
                    </div>
                </div>

                <div class="col-md-6 row col-md-offset-1">
                    @{if (!object.ReferenceEquals(Model.Student.PreviousEmployment.FirstOrDefault(), null))
                        {
                            <table class="table">

                                @foreach (var item in Model.Student.PreviousEmployment.OrderByDescending(s => s.EndYear).ThenByDescending(s => s.EndMonth.DisplayOrder))
                                {
                                    <tr>
                                        <td>&bull;</td>
                                        <td><strong>@Html.DisplayFor(modelItem => item.Position)</strong></td>
                                        <td>@Html.DisplayFor(modelItem => item.StartMonth.Name) @Html.DisplayFor(modelItem => item.StartYear) - @Html.DisplayFor(modelItem => item.EndMonth.Name) @Html.DisplayFor(modelItem => item.EndYear)</td>
                                        <td>@Html.ActionLink("Edit", "Edit", "PreviousEmployment", new { id = item.ID }, new { @class = "btn btn-xs navbuttons", @style = "background-color: #060; color: #FFF" })</td>
                                    </tr>
                                }
                            </table>
                        }
                        else
                        {
                            <p><em>No employment history listed.  Please add previous employement history.</em></p>
                        }
                    }

                </div>
            </div>

        </div>

        <br />

        <h4><strong><u>Publications Peer-Reviewed Journal (only Published)</u></strong></h4>

        <div class="row">
            <div class="form-group">

                <div class="row">
                    <div class="col-md-offset-1">
                        @Html.ActionLink("Add Publication", "Create", "Publications", new { id = Model.StudentID }, null)
                    </div>
                </div>

                <div class="col-md-10 row col-md-offset-1">
                    @{if (!object.ReferenceEquals(Model.Student.Publications.FirstOrDefault(), null))
                        {
                            <table class="table">

                                @foreach (var item in Model.Student.Publications.OrderByDescending(s => s.PubYear).ThenByDescending(s => s.PubMonth.DisplayOrder))
                                {
                                    <tr>
                                        <td>&bull;</td>
                                        <td>@Html.DisplayFor(modelItem => item.PublicationInformation)</td>
                                        <td>@Html.DisplayFor(modelItem => item.PubMonth.Name) @Html.DisplayFor(modelItem => item.PubYear)</td>
                                        <td>@Html.ActionLink("Edit", "Edit", "Publications", new { id = item.ID }, new { @class = "btn btn-xs navbuttons", @style = "background-color: #060; color: #FFF" })</td>
                                    </tr>
                                }
                            </table>
                        }
                        else
                        {
                            <p><em>No publications listed.  Please add a publication record.</em></p>
                        }
                    }

                </div>
            </div>

        </div>

        <br />

        <h4><strong><u>Grants</u></strong></h4>

        <div class="row">
            <div class="form-group">

                <div class="row">
                    <div class="col-md-offset-1">
                        @Html.ActionLink("Add Grant", "Create", "Grants", new { id = Model.StudentID }, null)
                    </div>
                </div>

                <div class="col-md-8 row col-md-offset-1">
                    @{if (!object.ReferenceEquals(Model.Student.Grants.FirstOrDefault(), null))
                        {
                            <table class="table">

                                @foreach (var item in Model.Student.Grants.OrderByDescending(s => s.GrantYear).ThenByDescending(s => s.GrantMonth.DisplayOrder))
                                {
                                    <tr>
                                        <td>&bull;</td>
                                        <td>@Html.DisplayFor(modelItem => item.GrantInformation)</td>
                                        <td>@Html.DisplayFor(modelItem => item.GrantMonth.Name) @Html.DisplayFor(modelItem => item.GrantYear)</td>
                                        <td>@Html.ActionLink("Edit", "Edit", "Grants", new { id = item.ID }, new { @class = "btn btn-xs navbuttons", @style = "background-color: #060; color: #FFF" })</td>
                                    </tr>
                                }
                            </table>
                        }
                        else
                        {
                            <p><em>No grants listed.  Please add a grant record.</em></p>
                        }
                    }

                </div>
            </div>

        </div>

        <br />

        <h4><strong><u>Honors and Awards</u></strong></h4>

        <div class="row">
            <div class="form-group">

                <div class="row">
                    <div class="col-md-offset-1">
                        @Html.ActionLink("Add Honor or Award", "Create", "Honors", new { id = Model.StudentID }, null)
                    </div>
                </div>

                <div class="col-md-8 row col-md-offset-1">
                    @{if (!object.ReferenceEquals(Model.Student.Honors.FirstOrDefault(), null))
                        {
                            <table class="table">

                                @foreach (var item in Model.Student.Honors.OrderByDescending(s => s.HonorYear).ThenByDescending(s => s.HonorMonth.DisplayOrder))
                                {
                                    <tr>
                                        <td>&bull;</td>
                                        <td>@Html.DisplayFor(modelItem => item.HonorInformation)</td>
                                        <td>@Html.DisplayFor(modelItem => item.HonorMonth.Name) @Html.DisplayFor(modelItem => item.HonorYear)</td>
                                        <td>@Html.ActionLink("Edit", "Edit", "Honors", new { id = item.ID }, new { @class = "btn btn-xs navbuttons", @style = "background-color: #060; color: #FFF" })</td>
                                    </tr>
                                }
                            </table>
                        }
                        else
                        {
                            <p><em>No honors or awards listed.  Please add an honor or award record.</em></p>
                        }
                    }

                </div>
            </div>

        </div>

        <br />

        <h4 class="alert alert-success text-center">
            <strong>Total Number of Publications, Grants, and Honors &amp; Awards </strong>
        </h4>

        @{
            @functions{
                /// <summary>
                /// Change start semester value to month.
                /// </summary>
                /// <param name="semesterVal">semester value</param>
                /// <returns></returns>
                public static int startMonthVal(int? semesterVal)
                {
                    if (semesterVal == 1)
                    {
                        return 01;
                    }
                    else if (semesterVal == 2)
                    {
                        return 06;
                    }
                    else if (semesterVal == 3)
                    {
                        return 08;
                    }
                    else
                    {
                        return 01;
                    }
                }

                /// <summary>
                /// Change end semester value to month.
                /// </summary>
                /// <param name="semesterVal">semester value</param>
                /// <returns></returns>
                public static int endMonthVal(int? semesterVal)
                {
                    if (semesterVal == 1)
                    {
                        return 05;
                    }
                    else if (semesterVal == 2)
                    {
                        return 08;
                    }
                    else if (semesterVal == 3)
                    {
                        return 12;
                    }
                    else
                    {
                        return 01;
                    }
                }
            }

            int startMonth = startMonthVal(Model.Student.DegreeStartSems.DisplayOrder);
            DateTime startDate = new DateTime(Model.Student.DegreeStartYear, startMonth, 31);
            int endMonth = endMonthVal(Model.Student.Graduation.FirstOrDefault().DegreeEndSems.DisplayOrder);
            DateTime endDate = new DateTime(Model.Student.Graduation.FirstOrDefault().DegreeEndYear.GetValueOrDefault(), endMonth, 31);
            DateTime now = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

        }

        <div class="row">

            <div class="col-md-4 col-xs-12">
                <h4><strong>Publications</strong></h4>

                <table class="table table-bordered table-hover table-striped col-md-offset-0">

                    @{
                        var beforeDuring = 0;
                        var year1 = 0; var year1Val = new DateTime(Model.Student.Graduation.FirstOrDefault().DegreeEndYear.GetValueOrDefault() + 1, endMonth, 31);
                        var year2 = 0; var year2Val = new DateTime(Model.Student.Graduation.FirstOrDefault().DegreeEndYear.GetValueOrDefault() + 2, endMonth, 31);
                        var year3 = 0; var year3Val = new DateTime(Model.Student.Graduation.FirstOrDefault().DegreeEndYear.GetValueOrDefault() + 3, endMonth, 31);
                        var year4 = 0; var year4Val = new DateTime(Model.Student.Graduation.FirstOrDefault().DegreeEndYear.GetValueOrDefault() + 4, endMonth, 31);
                        var year5 = 0; var year5Val = new DateTime(Model.Student.Graduation.FirstOrDefault().DegreeEndYear.GetValueOrDefault() + 5, endMonth, 31);
                        var postFuture = false;
                        if (Model.Student.Publications.FirstOrDefault() != null)
                        {
                            foreach (var item in Model.Student.Publications)
                            {
                                var pubDate = new DateTime(item.PubYear, item.PubMonth.DisplayOrder, 15);
                                if (endDate > startDate) //check if endDate is not null (set to 0)
                                {
                                    postFuture = true;
                                    if (pubDate < endDate)
                                    {
                                        beforeDuring++;
                                    } else if (pubDate > endDate && pubDate < year1Val)
                                    {
                                        year1++;
                                    } else if (pubDate > year1Val && pubDate < year2Val)
                                    {
                                        year2++;
                                    } else if (pubDate > year2Val && pubDate < year3Val)
                                    {
                                        year3++;
                                    } else if (pubDate > year3Val && pubDate < year4Val)
                                    {
                                        year4++;
                                    } else if (pubDate > year4Val && pubDate < year5Val)
                                    {
                                        year5++;
                                    }

                                }
                                else 
                                {
                                    beforeDuring++;
                                }
                            }
                        }
                        <tr>
                            <td>Before &amp; During Program</td>
                            <td>@beforeDuring</td>
                        </tr>
                        var total = beforeDuring + year1 + year2 + year3 + year4 + year5;
                        if (postFuture == true)
                        {
                            <tr>
                                <td>Year 1 &mdash; @year1Val.Year</td>
                                <td>@year1</td>
                            </tr>
                            <tr>
                                <td>Year 2 &mdash; @year2Val.Year</td>
                                <td>@year2</td>
                            </tr>
                            <tr>
                                <td>Year 3 &mdash; @year3Val.Year</td>
                                <td>@year3</td>
                            </tr>
                            <tr>
                                <td>Year 4 &mdash; @year4Val.Year</td>
                                <td>@year4</td>
                            </tr>
                            <tr>
                                <td>Year 5 &mdash; @year5Val.Year</td>
                                <td>@year5</td>
                            </tr>
                        }
                        <tr>
                            <td><strong>Total</strong></td>
                            <td><strong>@total</strong></td>
                        </tr>

                    }
                </table>

            </div>

            <div class="col-md-4 col-xs-12">
                <h4><strong>Grants</strong></h4>

                <table class="table table-bordered table-hover table-striped col-md-offset-0">

                    @{
                        var grantBefore = 0;
                        var grantDuring = 0;
                        var grantAfter = 0;
                        if (Model.Student.Grants.FirstOrDefault() != null)
                        {
                            foreach (var item in Model.Student.Grants)
                            {
                                var grantDate = new DateTime(item.GrantYear, item.GrantMonth.DisplayOrder, 15);
                                if (endDate > startDate) //check if endDate is not null (set to 0)
                                {
                                    if (grantDate < startDate)
                                    {
                                        grantBefore++;
                                    }
                                    else if (grantDate >= startDate && grantDate <= endDate)
                                    {
                                        grantDuring++;
                                    }
                                    else if (grantDate > endDate)
                                    {
                                        grantAfter++;
                                    }

                                }
                                else if (grantDate < startDate)
                                {
                                    grantBefore++;
                                }
                                else if (grantDate > startDate)
                                {
                                    grantDuring++;
                                }
                            }
                        }

                        int grantTotal = grantBefore + grantDuring + grantAfter;
                    }

                    <tr>
                        <td>Before Program</td>
                        <td>@grantBefore</td>
                    </tr>
                    <tr>
                        <td>During Program</td>
                        <td>@grantDuring</td>
                    </tr>
                    <tr>
                        <td>After Program</td>
                        <td>@grantAfter</td>
                    </tr>
                    <tr>
                        <td><strong>Total</strong></td>
                        <td><strong>@grantTotal</strong></td>
                    </tr>
                </table>


            </div>

            <div class="col-md-4 col-xs-12">
                <h4><strong>Honors &amp; Awards</strong></h4>

                <table class="table table-bordered table-hover table-striped col-md-offset-0">

                    @{
                        var honorsBefore = 0;
                        var honorsDuring = 0;
                        var honorsAfter = 0;
                        if (Model.Student.Honors.FirstOrDefault() != null)
                        {
                            foreach (var item in Model.Student.Honors)
                            {
                                var honorDate = new DateTime(item.HonorYear, item.HonorMonth.DisplayOrder, 15);
                                if (endDate > startDate) //check if endDate is not null (set to 0)
                                {
                                    if (honorDate < startDate)
                                    {
                                        honorsBefore++;
                                    }
                                    else if (honorDate >= startDate && honorDate <= endDate)
                                    {
                                        honorsDuring++;
                                    }
                                    else if (honorDate > endDate)
                                    {
                                        honorsAfter++;
                                    }

                                } else if (honorDate < startDate)
                                {
                                    honorsBefore++;
                                }
                                else if (honorDate > startDate)
                                {
                                    honorsDuring++;
                                }
                            }
                        }

                        int honorTotal = honorsBefore + honorsDuring + honorsAfter;
                    }

                    <tr>
                        <td>Before Program</td>
                        <td>@honorsBefore</td>
                    </tr>
                    <tr>
                        <td>During Program</td>
                        <td>@honorsDuring</td>
                    </tr>
                    <tr>
                        <td>After Program</td>
                        <td>@honorsAfter</td>
                    </tr>
                    <tr>
                        <td><strong>Total</strong></td>
                        <td><strong>@honorTotal</strong></td>
                    </tr>
                </table>

            </div>

        </div>



        <br />

        <div class="row">

            <div class="form-group">
                <div class="col-md-offset-1 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default createOrEditPost2" />
                </div>
            </div>

        </div>


    </div>
                                }

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}