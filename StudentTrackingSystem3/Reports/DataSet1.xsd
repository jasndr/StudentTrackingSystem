<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="DataSet1" targetNamespace="http://tempuri.org/DataSet1.xsd" xmlns:mstns="http://tempuri.org/DataSet1.xsd" xmlns="http://tempuri.org/DataSet1.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" attributeFormDefault="qualified" elementFormDefault="qualified">
  <xs:annotation>
    <xs:appinfo source="urn:schemas-microsoft-com:xml-msdatasource">
      <DataSource DefaultConnectionIndex="1" FunctionsComponentName="QueriesTableAdapter" GeneratorFunctionsComponentClassName="QueriesTableAdapter" Modifier="AutoLayout, AnsiClass, Class, Public" SchemaSerializationMode="IncludeSchema" UserFunctionsComponentName="QueriesTableAdapter" xmlns="urn:schemas-microsoft-com:xml-msdatasource">
        <Connections>
          <Connection AppSettingsObjectName="Web.config" AppSettingsPropertyName="SchoolContext_DatabasePublish" IsAppSettingsProperty="true" Modifier="Assembly" Name="SchoolContext_DatabasePublish (Web.config)" ParameterPrefix="@" PropertyReference="AppConfig.System.Configuration.ConfigurationManager.0.ConnectionStrings.SchoolContext_DatabasePublish.ConnectionString" Provider="System.Data.SqlClient" />
          <Connection AppSettingsObjectName="Web.config" AppSettingsPropertyName="SchoolContext" ConnectionStringObject="" IsAppSettingsProperty="true" Modifier="Assembly" Name="SchoolContext (Web.config)" ParameterPrefix="@" PropertyReference="AppConfig.System.Configuration.ConfigurationManager.0.ConnectionStrings.SchoolContext.ConnectionString" Provider="System.Data.SqlClient" />
        </Connections>
        <Tables>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="BackgroundTableAdapter" GeneratorDataComponentClassName="BackgroundTableAdapter" Name="Background" UserDataComponentName="BackgroundTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="SchoolContext (Web.config)" DbObjectType="Unknown" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="false" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="false" UserGetMethodName="GetData" UserSourceName="Fill">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>SELECT DISTINCT s.Id, s.StudentNumber AS StudentID, s.FirstName, s.MiddleName, s.LastName, s.SchoolEmail, s.OtherEmail, s.Phone, gender.Name AS Gender, REPLACE(REPLACE(REPLACE('&lt;' + STUFF
                      ((SELECT CASE WHEN pv2.DegreeTypesID IS NULL THEN 'N/A' WHEN pv2.DegreeTypesID = '' THEN 'N/A' ELSE '; -' + degTypes.Name + ' in ' + pv2.Title + ' (' + pv2.SchoolName + ', ' + CAST(YEAR(pv2.DateOfAward) AS nvarchar(4)) 
                                          + ')' END AS Expr1
                        FROM      PrevDegree AS pv2 INNER JOIN
                                          Student AS s2 ON s.Id = s2.Id AND s2.Id = pv2.StudentID LEFT OUTER JOIN
                                          CommonFields AS degTypes ON degTypes.ID = pv2.DegreeTypesID FOR XML PATH('')), 1, 1, ''), '&lt;Expr1&gt;', ''), '&lt;/Expr1&gt;', ''), ';', '') AS DegreeAtAdmission, REPLACE(REPLACE(REPLACE('&lt;' + STUFF
                      ((SELECT CASE WHEN r2.Name IS NULL THEN 'N/A' WHEN r2.Name = '' THEN 'N/A' ELSE '; -' + r2.Name END AS Expr1
                        FROM      Races AS r2 INNER JOIN
                                          PersonRaces AS pr2 ON pr2.RaceID = r2.Id INNER JOIN
                                          Student AS s2 ON s.Id = s2.Id AND s2.Id = pr2.StudentID FOR XML PATH('')), 1, 1, ''), '&lt;Expr1&gt;', ''), '&lt;/Expr1&gt;', ''), ';', '') AS RaceEthnicity, s.RaceOther, degreeProgram.Name AS DegreeProgram, track.Name AS Track, 
                  plans.Name AS [Plan], degreeStartSem.Name AS DegreeStartSemester, s.DegreeStartYear, gradSem.Name AS DegreeAwardedSemester, grad.DegreeEndYear AS DegreeAwardedYear
FROM     Student AS s LEFT OUTER JOIN
                  PrevDegree AS pd ON pd.StudentID = s.Id INNER JOIN
                  CommonFields AS gender ON gender.ID = s.GendersId INNER JOIN
                  CommonFields AS degreeProgram ON degreeProgram.ID = s.DegreeProgramsId INNER JOIN
                  CommonFields AS track ON track.ID = s.TracksId INNER JOIN
                  CommonFields AS plans ON plans.ID = s.PlansId INNER JOIN
                  CommonFields AS degreeStartSem ON degreeStartSem.ID = s.DegreeStartSemsId LEFT OUTER JOIN
                  Graduation AS grad ON grad.StudentID = s.Id LEFT OUTER JOIN
                  CommonFields AS gradSem ON gradSem.ID = grad.DegreeEndSemsId
WHERE  ((DATEFROMPARTS(s.DegreeStartYear, 01, 01) &lt; @FromDate AND NOT (DATEFROMPARTS(grad.DegreeEndYear, 1, 1) &lt; @FromDate) OR
                  DATEFROMPARTS(s.DegreeStartYear, 01, 01) &lt; @FromDate AND grad.DegreeEndYear IS NULL OR
                  DATEFROMPARTS(s.DegreeStartYear, 01, 01) &gt;= @FromDate AND DATEFROMPARTS(s.DegreeStartYear, 01, 01) &lt;= @ToDate) AND NOT (DATEFROMPARTS(s.DegreeStartYear, 01, 01) &gt; @ToDate) OR
                  ISNULL(@FromDate, '') = '' OR
                  ISNULL(@ToDate, '') = '') AND (s.FirstName + ' ' + s.LastName = @Student OR
                  ISNULL(@Student, '') = '') AND ((CASE WHEN (gradSem.Name IS NULL AND grad.DegreeEndYear IS NULL) THEN 'Current' ELSE 'Former' END) = @CurrentFormer OR
                  ISNULL(@CurrentFormer, '') = '')
ORDER BY s.DegreeStartYear DESC</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="FromDate" ColumnName="" DataSourceName="" DataTypeServer="unknown" DbType="AnsiString" Direction="Input" ParameterName="@FromDate" Precision="0" Scale="0" Size="1024" SourceColumn="" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="ToDate" ColumnName="" DataSourceName="" DataTypeServer="unknown" DbType="AnsiString" Direction="Input" ParameterName="@ToDate" Precision="0" Scale="0" Size="1024" SourceColumn="" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="Student" ColumnName="" DataSourceName="" DataTypeServer="unknown" DbType="String" Direction="Input" ParameterName="@Student" Precision="0" Scale="0" Size="1024" SourceColumn="" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="CurrentFormer" ColumnName="" DataSourceName="" DataTypeServer="unknown" DbType="AnsiString" Direction="Input" ParameterName="@CurrentFormer" Precision="0" Scale="0" Size="1024" SourceColumn="" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </SelectCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="Id" DataSetColumn="Id" />
              <Mapping SourceColumn="StudentID" DataSetColumn="StudentID" />
              <Mapping SourceColumn="FirstName" DataSetColumn="FirstName" />
              <Mapping SourceColumn="MiddleName" DataSetColumn="MiddleName" />
              <Mapping SourceColumn="LastName" DataSetColumn="LastName" />
              <Mapping SourceColumn="SchoolEmail" DataSetColumn="SchoolEmail" />
              <Mapping SourceColumn="OtherEmail" DataSetColumn="OtherEmail" />
              <Mapping SourceColumn="Phone" DataSetColumn="Phone" />
              <Mapping SourceColumn="Gender" DataSetColumn="Gender" />
              <Mapping SourceColumn="DegreeAtAdmission" DataSetColumn="DegreeAtAdmission" />
              <Mapping SourceColumn="RaceEthnicity" DataSetColumn="RaceEthnicity" />
              <Mapping SourceColumn="RaceOther" DataSetColumn="RaceOther" />
              <Mapping SourceColumn="DegreeProgram" DataSetColumn="DegreeProgram" />
              <Mapping SourceColumn="Track" DataSetColumn="Track" />
              <Mapping SourceColumn="Plan" DataSetColumn="Plan" />
              <Mapping SourceColumn="DegreeStartSemester" DataSetColumn="DegreeStartSemester" />
              <Mapping SourceColumn="DegreeStartYear" DataSetColumn="DegreeStartYear" />
              <Mapping SourceColumn="DegreeAwardedSemester" DataSetColumn="DegreeAwardedSemester" />
              <Mapping SourceColumn="DegreeAwardedYear" DataSetColumn="DegreeAwardedYear" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="CourseworkTableAdapter" GeneratorDataComponentClassName="CourseworkTableAdapter" Name="Coursework" UserDataComponentName="CourseworkTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="SchoolContext (Web.config)" DbObjectName="SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year) AS Semester, NULL AS Course, NULL AS Title, NULL AS Grade, NULL AS Credits FROM Student AS s RIGHT OUTER JOIN Coursework AS cw ON cw.StudentID = s.Id LEFT OUTER JOIN CommonFields AS sem ON sem.ID = cw.SemestersID LEFT OUTER JOIN Course AS c ON c.ID = cw.CourseID LEFT OUTER JOIN CommonFields AS grade ON grade.ID = cw.GradeID UNION ALL SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year) AS Semester, c.CourseNum AS Course, c.CourseName AS Title, grade.Name AS Grade, CAST(CASE WHEN grade.GradePoint &lt; 2 THEN 0 ELSE c.Credits END AS nvarchar(10)) AS Credits FROM Student AS s RIGHT OUTER JOIN Coursework AS cw ON cw.StudentID = s.Id LEFT OUTER JOIN CommonFields AS sem ON sem.ID = cw.SemestersID LEFT OUTER JOIN Course AS c ON c.ID = cw.CourseID LEFT OUTER JOIN CommonFields AS grade ON grade.ID = cw.GradeID UNION SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year) AS Semester, NULL AS Course, NULL AS Title, 'Total Number of Credits' AS Grade, CAST(SUM(CASE WHEN grade.GradePoint &lt; 2 THEN 0 ELSE c.Credits END) AS nvarchar(10)) AS Credits FROM Student AS s RIGHT OUTER JOIN Coursework AS cw ON cw.StudentID = s.Id LEFT OUTER JOIN CommonFields AS sem ON sem.ID = cw.SemestersID LEFT OUTER JOIN Course AS c ON c.ID = cw.CourseID LEFT OUTER JOIN CommonFields AS grade ON grade.ID = cw.GradeID GROUP BY sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year), s.StudentNumber, s.FirstName + ' ' + s.LastName UNION SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year) AS Semester, NULL AS Course, NULL AS Title, 'Semester GPA' AS Grade, CAST(CONVERT(DECIMAL(10, 2), SUM(grade.GradePoint) / COUNT(grade.GradePoint)) AS nvarchar(10)) AS Credits FROM Student AS s RIGHT OUTER JOIN Coursework AS cw ON cw.StudentID = s.Id LEFT OUTER JOIN CommonFields AS sem ON sem.ID = cw.SemestersID LEFT OUTER JOIN Course AS c ON c.ID = cw.CourseID LEFT OUTER JOIN CommonFields AS grade ON grade.ID = cw.GradeID GROUP BY sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year), s.StudentNumber, s.FirstName + ' ' + s.LastName" DbObjectType="Unknown" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="false" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="false" UserGetMethodName="GetData" UserSourceName="Fill">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>SELECT StudentID, Name, Semester, Course, Title, Grade, Credits
FROM     (SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year) AS Semester, NULL AS Course, NULL AS Title, NULL AS Grade, NULL AS Credits
                  FROM      Student AS s RIGHT OUTER JOIN
                                    Coursework AS cw ON cw.StudentID = s.Id LEFT OUTER JOIN
                                    CommonFields AS sem ON sem.ID = cw.SemestersID LEFT OUTER JOIN
                                    Course AS c ON c.ID = cw.CourseID LEFT OUTER JOIN
                                    CommonFields AS grade ON grade.ID = cw.GradeID
                  UNION ALL
                  SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year) AS Semester, c.CourseNum AS Course, c.CourseName AS Title, grade.Name AS Grade, 
                                    CAST(CASE WHEN grade.GradePoint &lt; 2 THEN 0 ELSE c.Credits END AS nvarchar(10)) AS Credits
                  FROM     Student AS s RIGHT OUTER JOIN
                                    Coursework AS cw ON cw.StudentID = s.Id LEFT OUTER JOIN
                                    CommonFields AS sem ON sem.ID = cw.SemestersID LEFT OUTER JOIN
                                    Course AS c ON c.ID = cw.CourseID LEFT OUTER JOIN
                                    CommonFields AS grade ON grade.ID = cw.GradeID
                  UNION
                  SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year) AS Semester, NULL AS Course, NULL AS Title, 'Total Number of Credits' AS Grade, 
                                    CAST(SUM(CASE WHEN grade.GradePoint &lt; 2 THEN 0 ELSE c.Credits END) AS nvarchar(10)) AS Credits
                  FROM     Student AS s RIGHT OUTER JOIN
                                    Coursework AS cw ON cw.StudentID = s.Id LEFT OUTER JOIN
                                    CommonFields AS sem ON sem.ID = cw.SemestersID LEFT OUTER JOIN
                                    Course AS c ON c.ID = cw.CourseID LEFT OUTER JOIN
                                    CommonFields AS grade ON grade.ID = cw.GradeID
                  GROUP BY sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year), s.StudentNumber, s.FirstName + ' ' + s.LastName
                  UNION
                  SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year) AS Semester, NULL AS Course, NULL AS Title, 'Semester GPA' AS Grade, CAST(CONVERT(DECIMAL(10, 
                                    2), SUM(grade.GradePoint) / COUNT(grade.GradePoint)) AS nvarchar(10)) AS Credits
                  FROM     Student AS s RIGHT OUTER JOIN
                                    Coursework AS cw ON cw.StudentID = s.Id LEFT OUTER JOIN
                                    CommonFields AS sem ON sem.ID = cw.SemestersID LEFT OUTER JOIN
                                    Course AS c ON c.ID = cw.CourseID LEFT OUTER JOIN
                                    CommonFields AS grade ON grade.ID = cw.GradeID
                  GROUP BY sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year), s.StudentNumber, s.FirstName + ' ' + s.LastName) AS a
WHERE  (Name = @Student) OR
                  (ISNULL(@Student, '') = '')
ORDER BY StudentID, Semester DESC, CASE WHEN [Grade] IS NULL THEN 1 WHEN [Grade] = 'Total Number of Credits' THEN 3 WHEN [Grade] = 'Semester GPA' THEN 4 ELSE 2 END</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="Student" ColumnName="Name" DataSourceName="SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year) AS Semester, NULL AS Course, NULL AS Title, NULL AS Grade, NULL AS Credits FROM Student AS s RIGHT OUTER JOIN Coursework AS cw ON cw.StudentID = s.Id LEFT OUTER JOIN CommonFields AS sem ON sem.ID = cw.SemestersID LEFT OUTER JOIN Course AS c ON c.ID = cw.CourseID LEFT OUTER JOIN CommonFields AS grade ON grade.ID = cw.GradeID UNION ALL SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year) AS Semester, c.CourseNum AS Course, c.CourseName AS Title, grade.Name AS Grade, CAST(CASE WHEN grade.GradePoint &lt; 2 THEN 0 ELSE c.Credits END AS nvarchar(10)) AS Credits FROM Student AS s RIGHT OUTER JOIN Coursework AS cw ON cw.StudentID = s.Id LEFT OUTER JOIN CommonFields AS sem ON sem.ID = cw.SemestersID LEFT OUTER JOIN Course AS c ON c.ID = cw.CourseID LEFT OUTER JOIN CommonFields AS grade ON grade.ID = cw.GradeID UNION SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year) AS Semester, NULL AS Course, NULL AS Title, 'Total Number of Credits' AS Grade, CAST(SUM(CASE WHEN grade.GradePoint &lt; 2 THEN 0 ELSE c.Credits END) AS nvarchar(10)) AS Credits FROM Student AS s RIGHT OUTER JOIN Coursework AS cw ON cw.StudentID = s.Id LEFT OUTER JOIN CommonFields AS sem ON sem.ID = cw.SemestersID LEFT OUTER JOIN Course AS c ON c.ID = cw.CourseID LEFT OUTER JOIN CommonFields AS grade ON grade.ID = cw.GradeID GROUP BY sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year), s.StudentNumber, s.FirstName + ' ' + s.LastName UNION SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year) AS Semester, NULL AS Course, NULL AS Title, 'Semester GPA' AS Grade, CAST(CONVERT(DECIMAL(10, 2), SUM(grade.GradePoint) / COUNT(grade.GradePoint)) AS nvarchar(10)) AS Credits FROM Student AS s RIGHT OUTER JOIN Coursework AS cw ON cw.StudentID = s.Id LEFT OUTER JOIN CommonFields AS sem ON sem.ID = cw.SemestersID LEFT OUTER JOIN Course AS c ON c.ID = cw.CourseID LEFT OUTER JOIN CommonFields AS grade ON grade.ID = cw.GradeID GROUP BY sem.Name + ' ' + CONVERT(nvarchar(4), cw.Year), s.StudentNumber, s.FirstName + ' ' + s.LastName" DataTypeServer="unknown" DbType="String" Direction="Input" ParameterName="@Student" Precision="0" Scale="0" Size="1024" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </SelectCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="StudentID" DataSetColumn="StudentID" />
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
              <Mapping SourceColumn="Semester" DataSetColumn="Semester" />
              <Mapping SourceColumn="Course" DataSetColumn="Course" />
              <Mapping SourceColumn="Title" DataSetColumn="Title" />
              <Mapping SourceColumn="Grade" DataSetColumn="Grade" />
              <Mapping SourceColumn="Credits" DataSetColumn="Credits" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="PerformanceTableAdapter" GeneratorDataComponentClassName="PerformanceTableAdapter" Name="Performance" UserDataComponentName="PerformanceTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="SchoolContext (Web.config)" DbObjectName="SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, 'Performance' AS StatusType, categ.Name AS Category, p.CategoryInfo AS Information, CASE WHEN categ.Name = 'Publication' THEN pubs.Name WHEN categ.Name = 'Abstract' THEN abstract.Name WHEN categ.Name = 'Proposal' THEN props.Name WHEN categ.Name = 'Teaching' THEN teach.Name END AS StatusDescription FROM Performance AS p LEFT OUTER JOIN Student AS s ON s.Id = p.StudentID LEFT OUTER JOIN CommonFields AS categ ON categ.ID = p.CategoryID LEFT OUTER JOIN CommonFields AS pubs ON pubs.ID = p.PublicationStatsID LEFT OUTER JOIN CommonFields AS abstract ON abstract.ID = p.AbstractStatsID LEFT OUTER JOIN CommonFields AS props ON props.ID = p.ProposalStatsID LEFT OUTER JOIN CommonFields AS teach ON teach.ID = p.TeachingStatsID UNION SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, NULL AS StatusType, NULL AS Category, 'Number of Performance Items' AS Information, CONVERT(nvarchar(20), COUNT(p.CategoryInfo)) AS StatusDescription FROM Performance AS p LEFT OUTER JOIN Student AS s ON s.Id = p.StudentID LEFT OUTER JOIN CommonFields AS categ ON categ.ID = p.CategoryID LEFT OUTER JOIN CommonFields AS pubs ON pubs.ID = p.PublicationStatsID LEFT OUTER JOIN CommonFields AS abstract ON abstract.ID = p.AbstractStatsID LEFT OUTER JOIN CommonFields AS props ON props.ID = p.ProposalStatsID LEFT OUTER JOIN CommonFields AS teach ON teach.ID = p.TeachingStatsID GROUP BY s.StudentNumber, s.FirstName, s.LastName UNION ALL SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, 'Activity Summary' AS StatusType, NULL AS Category, g.FileName AS Information, a.ActivitySummaryDesc AS StatusDescription FROM Student AS s RIGHT OUTER JOIN Activity AS a ON s.Id = a.StudentID RIGHT OUTER JOIN [File] AS g ON g.ActivityId = a.ID WHERE (g.FileType = 0) UNION ALL SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, NULL AS StatusType, NULL AS Category, 'Number of Activity Summary Documents' AS Information, CONVERT(nvarchar(100), COUNT(a.ActivitySummaryDesc)) AS StatusDescription FROM Student AS s RIGHT OUTER JOIN Activity AS a ON s.Id = a.StudentID RIGHT OUTER JOIN [File] AS g ON g.ActivityId = a.ID WHERE (g.FileType = 0) GROUP BY s.StudentNumber, s.FirstName, s.LastName" DbObjectType="Unknown" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="false" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="false" UserGetMethodName="GetData" UserSourceName="Fill">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>SELECT StudentID, Name, StatusType, Category, Information, StatusDescription
FROM     (SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, 'Performance' AS StatusType, categ.Name AS Category, p.CategoryInfo AS Information, 
                                    CASE WHEN categ.Name = 'Publication' THEN pubs.Name WHEN categ.Name = 'Abstract' THEN abstract.Name WHEN categ.Name = 'Proposal' THEN props.Name WHEN categ.Name = 'Teaching' THEN teach.Name END AS StatusDescription
                  FROM      Performance AS p LEFT OUTER JOIN
                                    Student AS s ON s.Id = p.StudentID LEFT OUTER JOIN
                                    CommonFields AS categ ON categ.ID = p.CategoryID LEFT OUTER JOIN
                                    CommonFields AS pubs ON pubs.ID = p.PublicationStatsID LEFT OUTER JOIN
                                    CommonFields AS abstract ON abstract.ID = p.AbstractStatsID LEFT OUTER JOIN
                                    CommonFields AS props ON props.ID = p.ProposalStatsID LEFT OUTER JOIN
                                    CommonFields AS teach ON teach.ID = p.TeachingStatsID
                  UNION
                  SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, NULL AS StatusType, NULL AS Category, 'Number of Performance Items' AS Information, CONVERT(nvarchar(20), COUNT(p.CategoryInfo)) 
                                    AS StatusDescription
                  FROM     Performance AS p LEFT OUTER JOIN
                                    Student AS s ON s.Id = p.StudentID LEFT OUTER JOIN
                                    CommonFields AS categ ON categ.ID = p.CategoryID LEFT OUTER JOIN
                                    CommonFields AS pubs ON pubs.ID = p.PublicationStatsID LEFT OUTER JOIN
                                    CommonFields AS abstract ON abstract.ID = p.AbstractStatsID LEFT OUTER JOIN
                                    CommonFields AS props ON props.ID = p.ProposalStatsID LEFT OUTER JOIN
                                    CommonFields AS teach ON teach.ID = p.TeachingStatsID
                  GROUP BY s.StudentNumber, s.FirstName, s.LastName
                  UNION ALL
                  SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, 'Activity Summary' AS StatusType, NULL AS Category, g.FileName AS Information, a.ActivitySummaryDesc AS StatusDescription
                  FROM     Student AS s RIGHT OUTER JOIN
                                    Activity AS a ON s.Id = a.StudentID RIGHT OUTER JOIN
                                    [File] AS g ON g.ActivityId = a.ID
                  WHERE  (g.FileType = 0)
                  UNION ALL
                  SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, NULL AS StatusType, NULL AS Category, 'Number of Activity Summary Documents' AS Information, CONVERT(nvarchar(100), 
                                    COUNT(a.ActivitySummaryDesc)) AS StatusDescription
                  FROM     Student AS s RIGHT OUTER JOIN
                                    Activity AS a ON s.Id = a.StudentID RIGHT OUTER JOIN
                                    [File] AS g ON g.ActivityId = a.ID
                  WHERE  (g.FileType = 0)
                  GROUP BY s.StudentNumber, s.FirstName, s.LastName) AS Performance
WHERE  (Name = @Student) OR
                  (ISNULL(@Student, '') = '')
ORDER BY Name, CASE WHEN [StatusType] = 'Performance' THEN 1 WHEN [StatusType] IS NULL AND [Information] = 'Number of Performance Items' THEN 2 WHEN [StatusType] = 'Activity Summary' THEN 3 WHEN [StatusType] IS NULL AND 
                  [Information] = 'Number of Activity Summary Documents' THEN 4 ELSE 5 END, 
                  CASE WHEN [Category] = 'Performance' THEN 1 WHEN [Category] = 'Publication' THEN 2 WHEN [Category] = 'Abstract' THEN 3 WHEN [Category] = 'Proposal' THEN 4 WHEN [Category] = 'Teaching' THEN 5 WHEN [Category] IS NULL AND 
                  [Information] = 'Number of Performance Items' THEN 6 ELSE 7 END</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="Student" ColumnName="Name" DataSourceName="SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, 'Performance' AS StatusType, categ.Name AS Category, p.CategoryInfo AS Information, CASE WHEN categ.Name = 'Publication' THEN pubs.Name WHEN categ.Name = 'Abstract' THEN abstract.Name WHEN categ.Name = 'Proposal' THEN props.Name WHEN categ.Name = 'Teaching' THEN teach.Name END AS StatusDescription FROM Performance AS p LEFT OUTER JOIN Student AS s ON s.Id = p.StudentID LEFT OUTER JOIN CommonFields AS categ ON categ.ID = p.CategoryID LEFT OUTER JOIN CommonFields AS pubs ON pubs.ID = p.PublicationStatsID LEFT OUTER JOIN CommonFields AS abstract ON abstract.ID = p.AbstractStatsID LEFT OUTER JOIN CommonFields AS props ON props.ID = p.ProposalStatsID LEFT OUTER JOIN CommonFields AS teach ON teach.ID = p.TeachingStatsID UNION SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, NULL AS StatusType, NULL AS Category, 'Number of Performance Items' AS Information, CONVERT(nvarchar(20), COUNT(p.CategoryInfo)) AS StatusDescription FROM Performance AS p LEFT OUTER JOIN Student AS s ON s.Id = p.StudentID LEFT OUTER JOIN CommonFields AS categ ON categ.ID = p.CategoryID LEFT OUTER JOIN CommonFields AS pubs ON pubs.ID = p.PublicationStatsID LEFT OUTER JOIN CommonFields AS abstract ON abstract.ID = p.AbstractStatsID LEFT OUTER JOIN CommonFields AS props ON props.ID = p.ProposalStatsID LEFT OUTER JOIN CommonFields AS teach ON teach.ID = p.TeachingStatsID GROUP BY s.StudentNumber, s.FirstName, s.LastName UNION ALL SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, 'Activity Summary' AS StatusType, NULL AS Category, g.FileName AS Information, a.ActivitySummaryDesc AS StatusDescription FROM Student AS s RIGHT OUTER JOIN Activity AS a ON s.Id = a.StudentID RIGHT OUTER JOIN [File] AS g ON g.ActivityId = a.ID WHERE (g.FileType = 0) UNION ALL SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, NULL AS StatusType, NULL AS Category, 'Number of Activity Summary Documents' AS Information, CONVERT(nvarchar(100), COUNT(a.ActivitySummaryDesc)) AS StatusDescription FROM Student AS s RIGHT OUTER JOIN Activity AS a ON s.Id = a.StudentID RIGHT OUTER JOIN [File] AS g ON g.ActivityId = a.ID WHERE (g.FileType = 0) GROUP BY s.StudentNumber, s.FirstName, s.LastName" DataTypeServer="unknown" DbType="String" Direction="Input" ParameterName="@Student" Precision="0" Scale="0" Size="1024" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </SelectCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="StudentID" DataSetColumn="StudentID" />
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
              <Mapping SourceColumn="Category" DataSetColumn="Category" />
              <Mapping SourceColumn="Information" DataSetColumn="Information" />
              <Mapping SourceColumn="StatusType" DataSetColumn="StatusType" />
              <Mapping SourceColumn="StatusDescription" DataSetColumn="StatusDescription" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="RequirementsTableAdapter" GeneratorDataComponentClassName="RequirementsTableAdapter" Name="Requirements" UserDataComponentName="RequirementsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="SchoolContext (Web.config)" DbObjectType="Unknown" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="false" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="false" UserGetMethodName="GetData" UserSourceName="Fill">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>SELECT DISTINCT 
                  s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, qr.Name + 'ed - ' + CONVERT(CHAR(10), g.DateOfQualification, 101) + CASE WHEN qr2.ID IS NULL THEN '' ELSE '; ' + qr2.Name + 'ed - ' + CONVERT(CHAR(10), 
                  g.DateOfQualification2, 101) END AS QualifiyingExamination, g.Form2Title AS ResearchTopic, fr.Name + 'ed -  ' + CONVERT(CHAR(10), g.Form2Date, 101) AS ProposalPresentation, cer.Name + 'ed - ' + CONVERT(CHAR(10), 
                  g.DateOfCompExam, 101) + CASE WHEN cer2.ID IS NULL THEN '' ELSE '; ' + cer2.Name + 'ed - ' + CONVERT(CHAR(10), g.DateOfCompExam2, 101) END AS ComprehensiveExam, 
                  g.AdvisorName + ' - ' + g.AdvisorDepartment + ' (' + g.AdvisorUniversity + ')' AS Advisor, STUFF
                      ((SELECT DISTINCT '; ' + cm2.Name + ' - ' + cm2.Department + ' (' + cm2.University + ')' AS Expr1
                        FROM      CommitteeMember AS cm2 LEFT OUTER JOIN
                                          Student AS s2 ON cm2.StudentID = s2.Id
                        WHERE   (s2.Id = s.Id) FOR XML PATH('')), 1, 1, '') AS CommitteeMembers, g.Form3Title AS FinalDefenseTitle, fdr.Name + 'ed - ' + CONVERT(CHAR(10), g.Form3Date, 101) AS FinalDefenseResult, STUFF
                      ((SELECT DISTINCT '; ' + mFile2.FileName AS Expr1
                        FROM      [File] AS mFile2 RIGHT OUTER JOIN
                                          Manuscript AS m2 ON m2.ID = mFile2.ManuscriptId LEFT OUTER JOIN
                                          Student AS s2 ON m2.StudentID = s2.Id
                        WHERE   (s2.Id = s.Id) FOR XML PATH('')), 1, 1, '') AS ManuscriptFile, degreeEnd.Name + ' ' + CONVERT(NVARCHAR(4), g.DegreeEndYear) AS DegreeAwarded
FROM     Graduation AS g LEFT OUTER JOIN
                  Student AS s ON g.StudentID = s.Id LEFT OUTER JOIN
                  CommonFields AS qr ON g.QualifierResultId = qr.ID LEFT OUTER JOIN
                  CommonFields AS qr2 ON g.Qualifier2ResultId = qr2.ID LEFT OUTER JOIN
                  CommonFields AS fr ON g.Form2ResultId = fr.ID LEFT OUTER JOIN
                  CommonFields AS cer ON g.CompExamResultId = cer.ID LEFT OUTER JOIN
                  CommonFields AS cer2 ON g.CompExam2ResultId = cer2.ID LEFT OUTER JOIN
                  CommonFields AS fdr ON g.Form3ResultId = fdr.ID LEFT OUTER JOIN
                  Manuscript AS m ON m.StudentID = s.Id LEFT OUTER JOIN
                  [File] AS mFile ON mFile.ManuscriptId = m.ID LEFT OUTER JOIN
                  CommonFields AS degreeEnd ON degreeEnd.ID = g.DegreeEndSemsId
WHERE  ((DATEFROMPARTS(s.DegreeStartYear, 01, 01) &lt; @FromDate AND NOT (DATEFROMPARTS(g.DegreeEndYear, 1, 1) &lt; @FromDate) OR
                  DATEFROMPARTS(s.DegreeStartYear, 01, 01) &lt; @FromDate AND g.DegreeEndYear IS NULL OR
                  DATEFROMPARTS(s.DegreeStartYear, 01, 01) &gt;= @FromDate AND DATEFROMPARTS(s.DegreeStartYear, 01, 01) &lt;= @ToDate) AND NOT (DATEFROMPARTS(s.DegreeStartYear, 01, 01) &gt; @ToDate) OR
                  ISNULL(@FromDate, '') = '' OR
                  ISNULL(@ToDate, '') = '') AND (s.FirstName + ' ' + s.LastName = @Student OR
                  ISNULL(@Student, '') = '') AND ((CASE WHEN (degreeEnd.Name IS NULL AND g.DegreeEndYear IS NULL) THEN 'Current' ELSE 'Former' END) = @CurrentFormer OR
                  ISNULL(@CurrentFormer, '') = '')</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="FromDate" ColumnName="" DataSourceName="" DataTypeServer="unknown" DbType="AnsiString" Direction="Input" ParameterName="@FromDate" Precision="0" Scale="0" Size="1024" SourceColumn="" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="ToDate" ColumnName="" DataSourceName="" DataTypeServer="unknown" DbType="AnsiString" Direction="Input" ParameterName="@ToDate" Precision="0" Scale="0" Size="1024" SourceColumn="" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="Student" ColumnName="" DataSourceName="" DataTypeServer="unknown" DbType="String" Direction="Input" ParameterName="@Student" Precision="0" Scale="0" Size="1024" SourceColumn="" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="CurrentFormer" ColumnName="" DataSourceName="" DataTypeServer="unknown" DbType="AnsiString" Direction="Input" ParameterName="@CurrentFormer" Precision="0" Scale="0" Size="1024" SourceColumn="" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </SelectCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
              <Mapping SourceColumn="Advisor" DataSetColumn="Advisor" />
              <Mapping SourceColumn="StudentID" DataSetColumn="StudentID" />
              <Mapping SourceColumn="QualifiyingExamination" DataSetColumn="QualifiyingExamination" />
              <Mapping SourceColumn="ResearchTopic" DataSetColumn="ResearchTopic" />
              <Mapping SourceColumn="ProposalPresentation" DataSetColumn="ProposalPresentation" />
              <Mapping SourceColumn="ComprehensiveExam" DataSetColumn="ComprehensiveExam" />
              <Mapping SourceColumn="CommitteeMembers" DataSetColumn="CommitteeMembers" />
              <Mapping SourceColumn="FinalDefenseTitle" DataSetColumn="FinalDefenseTitle" />
              <Mapping SourceColumn="FinalDefenseResult" DataSetColumn="FinalDefenseResult" />
              <Mapping SourceColumn="ManuscriptFile" DataSetColumn="ManuscriptFile" />
              <Mapping SourceColumn="DegreeAwarded" DataSetColumn="DegreeAwarded" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="PostgraduationTableAdapter" GeneratorDataComponentClassName="PostgraduationTableAdapter" Name="Postgraduation" UserDataComponentName="PostgraduationTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="SchoolContext (Web.config)" DbObjectType="Unknown" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="false" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="false" UserGetMethodName="GetData" UserSourceName="Fill">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>SELECT s.StudentNumber AS StudentID, s.FirstName + ' ' + s.LastName AS Name, s.OtherEmail AS Email, s.Phone, STUFF
                      ((SELECT DISTINCT '; ' + cvFile2.FileName AS Expr1
                        FROM      [File] AS cvFile2 LEFT OUTER JOIN
                                          CurriculumVitae AS cv2 ON cvFile2.CurriculumVitaeId = cv2.ID LEFT OUTER JOIN
                                          Student AS s2 ON cv2.StudentID = s2.Id
                        WHERE   (s2.Id = s.Id) FOR XML PATH('')), 1, 1, '') AS CVs, STUFF
                      ((SELECT DISTINCT '; ' + pe2.Position + '-' + pe2.Employer + ' (' + sm2.Name + ' ' + CONVERT(nvarchar(4), pe2.StartYear) + '-' + em2.Name + ' ' + CONVERT(nvarchar(4), pe2.EndYear) + ')' AS Expr1
                        FROM      PreviousEmployment AS pe2 LEFT OUTER JOIN
                                          Student AS s2 ON pe2.StudentID = s2.Id LEFT OUTER JOIN
                                          CommonFields AS sm2 ON pe2.StartMonthId = sm2.ID LEFT OUTER JOIN
                                          CommonFields AS em2 ON pe2.EndMonthId = em2.ID
                        WHERE   (s2.Id = s.Id) FOR XML PATH('')), 1, 1, '') AS EmploymentHistory, STUFF
                      ((SELECT DISTINCT '; ' + pub2.PublicationInformation + ' (' + pm2.Name + ' ' + CONVERT(nvarchar(4), pub2.PubYear) + ')' AS Expr1
                        FROM      Publications AS pub2 LEFT OUTER JOIN
                                          Student AS s2 ON pub2.StudentID = s2.Id LEFT OUTER JOIN
                                          CommonFields AS pm2 ON pub2.PubMonthId = pm2.ID
                        WHERE   (s2.Id = s.Id) FOR XML PATH('')), 1, 1, '') AS PublicationsPeerReviewedJournalonlyPublished, publ.TotalNumberofPublications, STUFF
                      ((SELECT DISTINCT '; ' + grt2.GrantInformation + ' (' + gm2.Name + ' ' + CONVERT(nvarchar(4), grt2.GrantYear) + ')' AS Expr1
                        FROM      Grants AS grt2 LEFT OUTER JOIN
                                          CommonFields AS gm2 ON grt2.GrantMonthId = gm2.ID LEFT OUTER JOIN
                                          Student AS s2 ON grt2.StudentID = s2.Id
                        WHERE   (s2.Id = s.Id) FOR XML PATH('')), 1, 1, '') AS Grants, grants.TotalNumberofGrants, STUFF
                      ((SELECT DISTINCT '; ' + h2.HonorInformation + ' (' + hm2.Name + ' ' + CONVERT(nvarchar(4), h2.HonorYear) + ')' AS Expr1
                        FROM      Honors AS h2 LEFT OUTER JOIN
                                          CommonFields AS hm2 ON h2.HonorMonthId = hm2.ID LEFT OUTER JOIN
                                          Student AS s2 ON h2.StudentID = s2.Id
                        WHERE   (s2.Id = s.Id) FOR XML PATH('')), 1, 1, '') AS HonorsAwards, honors.TotalNumberofHonorsAwards
FROM     Student AS s LEFT OUTER JOIN
                  Graduation AS g ON g.StudentID = s.Id LEFT OUTER JOIN
                      (SELECT s.Id, '&lt;u&gt;Total: &lt;strong&gt;' + CONVERT(nvarchar(4), COUNT(*)) + '&lt;/strong&gt;&lt;/u&gt;' + CHAR(13) + '&lt;br /&gt;&lt;br /&gt;Before Program: ' + CONVERT(nvarchar(4), COUNT(before.ID)) + CHAR(13) + CASE WHEN g.DegreeEndYear IS NOT NULL 
                                         THEN ('&lt;br /&gt;&lt;br /&gt;During Program: ' + CONVERT(nvarchar(4), COUNT(durin2.ID)) + CHAR(13) + '&lt;br /&gt;&lt;br /&gt;Year 1 (' + CONVERT(nvarchar(30), CASE WHEN g.DegreeEndSemsId = 1 THEN 'June ' + CONVERT(nvarchar(4), 
                                         g.DegreeEndYear) + ' - May ' + CONVERT(nvarchar(4), g.DegreeEndYear + 1) + '): ' WHEN g.DegreeEndSemsId = 3 THEN 'September' + CONVERT(nvarchar(4), g.DegreeEndYear) + ' - August' + CONVERT(nvarchar(4), 
                                         g.DegreeEndYear + 1) + '): ' ELSE 'January' + CONVERT(nvarchar(4), g.DegreeEndYear + 1) + ' - December' + CONVERT(nvarchar(4), g.DegreeEndYear + 1) + '): ' END) + CONVERT(nvarchar(4), COUNT(year_1.ID)) + CHAR(13) 
                                         + '&lt;br /&gt;&lt;br /&gt;Year 2 (' + CONVERT(nvarchar(30), CASE WHEN g.DegreeEndSemsId = 1 THEN 'June ' + CONVERT(nvarchar(4), g.DegreeEndYear + 1) + ' - May ' + CONVERT(nvarchar(4), g.DegreeEndYear + 2) 
                                         + '): ' WHEN g.DegreeEndSemsId = 3 THEN 'September' + CONVERT(nvarchar(4), g.DegreeEndYear + 1) + ' - August' + CONVERT(nvarchar(4), g.DegreeEndYear + 2) + '): ' ELSE 'January' + CONVERT(nvarchar(4), 
                                         g.DegreeEndYear + 2) + ' - December' + CONVERT(nvarchar(4), g.DegreeEndYear + 2) + '): ' END) + CONVERT(nvarchar(4), COUNT(year_2.ID)) + CHAR(13) + '&lt;br /&gt;&lt;br /&gt;Year 3 (' + CONVERT(nvarchar(30), 
                                         CASE WHEN g.DegreeEndSemsId = 1 THEN 'June ' + CONVERT(nvarchar(4), g.DegreeEndYear + 2) + ' - May ' + CONVERT(nvarchar(4), g.DegreeEndYear + 3) 
                                         + '): ' WHEN g.DegreeEndSemsId = 3 THEN 'September' + CONVERT(nvarchar(4), g.DegreeEndYear + 2) + ' - August' + CONVERT(nvarchar(4), g.DegreeEndYear + 3) + '): ' ELSE 'January' + CONVERT(nvarchar(4), 
                                         g.DegreeEndYear + 3) + ' - December' + CONVERT(nvarchar(4), g.DegreeEndYear + 3) + '): ' END) + CONVERT(nvarchar(4), COUNT(year_3.ID)) + CHAR(13) + '&lt;br /&gt;&lt;br /&gt;Year 4 (' + CONVERT(nvarchar(30), 
                                         CASE WHEN g.DegreeEndSemsId = 1 THEN 'June ' + CONVERT(nvarchar(4), g.DegreeEndYear + 3) + ' - May ' + CONVERT(nvarchar(4), g.DegreeEndYear + 4) 
                                         + '): ' WHEN g.DegreeEndSemsId = 3 THEN 'September' + CONVERT(nvarchar(4), g.DegreeEndYear + 3) + ' - August' + CONVERT(nvarchar(4), g.DegreeEndYear + 4) + '): ' ELSE 'January' + CONVERT(nvarchar(4), 
                                         g.DegreeEndYear + 4) + ' - December' + CONVERT(nvarchar(4), g.DegreeEndYear + 4) + '): ' END) + CONVERT(nvarchar(4), COUNT(year_4.ID)) + CHAR(13) + '&lt;br /&gt;&lt;br /&gt;Year 5 (' + CONVERT(nvarchar(30), 
                                         CASE WHEN g.DegreeEndSemsId = 1 THEN 'June ' + CONVERT(nvarchar(4), g.DegreeEndYear + 4) + ' - May ' + CONVERT(nvarchar(4), g.DegreeEndYear + 5) 
                                         + '): ' WHEN g.DegreeEndSemsId = 3 THEN 'September' + CONVERT(nvarchar(4), g.DegreeEndYear + 4) + ' - August' + CONVERT(nvarchar(4), g.DegreeEndYear + 5) + '): ' ELSE 'January' + CONVERT(nvarchar(4), 
                                         g.DegreeEndYear + 5) + ' - December' + CONVERT(nvarchar(4), g.DegreeEndYear + 5) + '): ' END) + CONVERT(nvarchar(4), COUNT(year_5.ID))) ELSE '&lt;br /&gt;&lt;br /&gt;During Program: ' + CONVERT(nvarchar(4), COUNT(durin1.ID)) 
                                         END AS TotalNumberofPublications
                       FROM      Publications AS pub INNER JOIN
                                         Student AS s ON pub.StudentID = s.Id LEFT OUTER JOIN
                                         Graduation AS g ON g.StudentID = s.Id LEFT OUTER JOIN
                                         CommonFields AS pubMonth ON pub.PubMonthId = pubMonth.ID LEFT OUTER JOIN
                                         Publications AS before ON before.ID = pub.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), before.PubYear)) &lt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN s.DegreeStartSemsId = 1 THEN 5 WHEN s.DegreeStartSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), s.DegreeStartYear)) LEFT OUTER JOIN
                                         Publications AS durin1 ON durin1.ID = pub.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), durin1.PubYear)) &gt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN s.DegreeStartSemsId = 1 THEN 5 WHEN s.DegreeStartSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), s.DegreeStartYear)) LEFT OUTER JOIN
                                         Publications AS durin2 ON durin2.ID = pub.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), durin2.PubYear)) &gt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN s.DegreeStartSemsId = 1 THEN 5 WHEN s.DegreeStartSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), s.DegreeStartYear)) AND CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), durin2.PubYear)) &lt;= CONVERT(DATETIME, CONVERT(nvarchar(2), CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) 
                                         + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear)) LEFT OUTER JOIN
                                         Publications AS year_1 ON year_1.ID = pub.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), year_1.PubYear)) &gt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear)) AND CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), year_1.PubYear)) &lt;= CONVERT(DATETIME, CONVERT(nvarchar(2), CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) 
                                         + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear + 1)) LEFT OUTER JOIN
                                         Publications AS year_2 ON year_2.ID = pub.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), year_2.PubYear)) &gt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear + 1)) AND CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), year_1.PubYear)) &lt;= CONVERT(DATETIME, CONVERT(nvarchar(2), CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) 
                                         + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear + 2)) LEFT OUTER JOIN
                                         Publications AS year_3 ON year_3.ID = pub.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), year_3.PubYear)) &gt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear + 2)) AND CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), year_3.PubYear)) &lt;= CONVERT(DATETIME, CONVERT(nvarchar(2), CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) 
                                         + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear + 3)) LEFT OUTER JOIN
                                         Publications AS year_4 ON year_2.ID = pub.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), year_4.PubYear)) &gt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear + 4)) AND CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), year_4.PubYear)) &lt;= CONVERT(DATETIME, CONVERT(nvarchar(2), CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) 
                                         + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear + 5)) LEFT OUTER JOIN
                                         Publications AS year_5 ON year_2.ID = pub.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), year_5.PubYear)) &gt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear + 5)) AND CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         pubMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), year_5.PubYear)) &lt;= CONVERT(DATETIME, CONVERT(nvarchar(2), CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) 
                                         + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear + 6))
                       GROUP BY s.Id, s.FirstName, g.DegreeEndYear, g.DegreeEndSemsId) AS publ ON publ.Id = s.Id LEFT OUTER JOIN
                      (SELECT s.Id, '&lt;u&gt;Total: &lt;strong&gt;' + CONVERT(nvarchar(4), COUNT(*)) + '&lt;/strong&gt;&lt;/u&gt;' + CHAR(13) + '&lt;br /&gt;&lt;br /&gt;Before Program: ' + CONVERT(nvarchar(4), COUNT(grBefore.ID)) + CHAR(13) + CASE WHEN g.DegreeEndYear IS NOT NULL 
                                         THEN ('&lt;br /&gt;&lt;br /&gt;During Program: ' + CONVERT(nvarchar(4), COUNT(grDurin2.ID)) + CHAR(13) + '&lt;br /&gt;&lt;br /&gt;After Program: ' + CONVERT(nvarchar(4), COUNT(grAfter.ID))) 
                                         ELSE '&lt;br /&gt;&lt;br /&gt;During Program: ' + CONVERT(nvarchar(4), COUNT(grDurin1.ID)) END AS TotalNumberofGrants
                       FROM      Grants AS gr INNER JOIN
                                         Student AS s ON gr.StudentID = s.Id LEFT OUTER JOIN
                                         Graduation AS g ON g.StudentID = s.Id LEFT OUTER JOIN
                                         CommonFields AS grantMonth ON gr.GrantMonthId = grantMonth.ID LEFT OUTER JOIN
                                         Grants AS grBefore ON grBefore.ID = gr.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), grantMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), grBefore.GrantYear)) &lt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN s.DegreeStartSemsId = 1 THEN 5 WHEN s.DegreeStartSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), s.DegreeStartYear)) LEFT OUTER JOIN
                                         Grants AS grDurin1 ON grDurin1.ID = gr.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), grantMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), grDurin1.GrantYear)) &gt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN s.DegreeStartSemsId = 1 THEN 5 WHEN s.DegreeStartSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), s.DegreeStartYear)) LEFT OUTER JOIN
                                         Grants AS grDurin2 ON grDurin2.ID = gr.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), grantMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), grDurin2.GrantYear)) &gt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN s.DegreeStartSemsId = 1 THEN 5 WHEN s.DegreeStartSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), s.DegreeStartYear)) AND CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         grantMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), grDurin2.GrantYear)) &lt;= CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear)) LEFT OUTER JOIN
                                         Grants AS grAfter ON grAfter.ID = gr.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), grantMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), grAfter.GrantYear)) &gt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear))
                       GROUP BY s.Id, s.FirstName, g.DegreeEndYear, g.DegreeEndSemsId) AS grants ON grants.Id = s.Id LEFT OUTER JOIN
                      (SELECT s.Id, '&lt;u&gt;Total: &lt;strong&gt;' + CONVERT(nvarchar(4), COUNT(*)) + '&lt;/strong&gt;&lt;/u&gt;' + CHAR(13) + '&lt;br /&gt;&lt;br /&gt;Before Program: ' + CONVERT(nvarchar(4), COUNT(honBefore.ID)) + CHAR(13) 
                                         + CASE WHEN g.DegreeEndYear IS NOT NULL THEN ('&lt;br /&gt;&lt;br /&gt;During Program: ' + CONVERT(nvarchar(4), COUNT(honDurin2.ID)) + CHAR(13) + '&lt;br /&gt;&lt;br /&gt;After Program: ' + CONVERT(nvarchar(4), COUNT(honAfter.ID))) 
                                         ELSE '&lt;br /&gt;&lt;br /&gt;During Program: ' + CONVERT(nvarchar(4), COUNT(honDurin1.ID)) END AS TotalNumberofHonorsAwards
                       FROM      Honors AS hon INNER JOIN
                                         Student AS s ON hon.StudentID = s.Id LEFT OUTER JOIN
                                         Graduation AS g ON g.StudentID = s.Id LEFT OUTER JOIN
                                         CommonFields AS honorMonth ON hon.HonorMonthId = honorMonth.ID LEFT OUTER JOIN
                                         Honors AS honBefore ON honBefore.ID = hon.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), honorMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), honBefore.HonorYear)) &lt; CONVERT(DATETIME, 
                                         CONVERT(nvarchar(2), CASE WHEN s.DegreeStartSemsId = 1 THEN 5 WHEN s.DegreeStartSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), s.DegreeStartYear)) LEFT OUTER JOIN
                                         Honors AS honDurin1 ON honDurin1.ID = hon.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), honorMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), honDurin1.HonorYear)) &gt; CONVERT(DATETIME, 
                                         CONVERT(nvarchar(2), CASE WHEN s.DegreeStartSemsId = 1 THEN 5 WHEN s.DegreeStartSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), s.DegreeStartYear)) LEFT OUTER JOIN
                                         Honors AS honDurin2 ON honDurin2.ID = hon.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), honorMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), honDurin2.HonorYear)) &gt; CONVERT(DATETIME, 
                                         CONVERT(nvarchar(2), CASE WHEN s.DegreeStartSemsId = 1 THEN 5 WHEN s.DegreeStartSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), s.DegreeStartYear)) AND CONVERT(DATETIME, 
                                         CONVERT(nvarchar(2), honorMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), honDurin2.HonorYear)) &lt;= CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear)) LEFT OUTER JOIN
                                         Honors AS honAfter ON honAfter.ID = hon.ID AND CONVERT(DATETIME, CONVERT(nvarchar(2), honorMonth.DisplayOrder) + '/15/' + CONVERT(nvarchar(4), honAfter.HonorYear)) &gt; CONVERT(DATETIME, CONVERT(nvarchar(2), 
                                         CASE WHEN g.DegreeEndSemsId = 1 THEN 5 WHEN g.DegreeEndSemsId = 3 THEN 8 ELSE 12 END) + '/31/' + CONVERT(nvarchar(4), g.DegreeEndYear))
                       GROUP BY s.Id, s.FirstName, g.DegreeEndYear, g.DegreeEndSemsId) AS honors ON honors.Id = s.Id
WHERE  (@Student = s.FirstName + ' ' + s.LastName) OR
                  (@Student IS NULL)
GROUP BY s.Id, s.StudentNumber, s.FirstName, s.LastName, s.OtherEmail, s.Phone, g.DegreeEndYear, g.DegreeEndSemsId, publ.TotalNumberofPublications, grants.TotalNumberofGrants, honors.TotalNumberofHonorsAwards</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="Student" ColumnName="" DataSourceName="" DataTypeServer="unknown" DbType="AnsiString" Direction="Input" ParameterName="@Student" Precision="0" Scale="0" Size="1024" SourceColumn="" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </SelectCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="StudentID" DataSetColumn="StudentID" />
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
              <Mapping SourceColumn="Email" DataSetColumn="Email" />
              <Mapping SourceColumn="Phone" DataSetColumn="Phone" />
              <Mapping SourceColumn="CVs" DataSetColumn="CVs" />
              <Mapping SourceColumn="EmploymentHistory" DataSetColumn="EmploymentHistory" />
              <Mapping SourceColumn="PublicationsPeerReviewedJournalonlyPublished" DataSetColumn="PublicationsPeerReviewedJournalonlyPublished" />
              <Mapping SourceColumn="TotalNumberofPublications" DataSetColumn="TotalNumberofPublications" />
              <Mapping SourceColumn="Grants" DataSetColumn="Grants" />
              <Mapping SourceColumn="TotalNumberofGrants" DataSetColumn="TotalNumberofGrants" />
              <Mapping SourceColumn="HonorsAwards" DataSetColumn="HonorsAwards" />
              <Mapping SourceColumn="TotalNumberofHonorsAwards" DataSetColumn="TotalNumberofHonorsAwards" />
            </Mappings>
            <Sources />
          </TableAdapter>
        </Tables>
        <Sources />
      </DataSource>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="DataSet1" msdata:IsDataSet="true" msdata:UseCurrentLocale="true" msprop:EnableTableAdapterManager="true" msprop:Generator_DataSetName="DataSet1" msprop:Generator_UserDSName="DataSet1">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Background" msprop:Generator_TableClassName="BackgroundDataTable" msprop:Generator_TableVarName="tableBackground" msprop:Generator_TablePropName="Background" msprop:Generator_RowDeletingName="BackgroundRowDeleting" msprop:Generator_RowChangingName="BackgroundRowChanging" msprop:Generator_RowEvHandlerName="BackgroundRowChangeEventHandler" msprop:Generator_RowDeletedName="BackgroundRowDeleted" msprop:Generator_UserTableName="Background" msprop:Generator_RowChangedName="BackgroundRowChanged" msprop:Generator_RowEvArgName="BackgroundRowChangeEvent" msprop:Generator_RowClassName="BackgroundRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Id" msdata:ReadOnly="true" msdata:AutoIncrement="true" msdata:AutoIncrementSeed="-1" msdata:AutoIncrementStep="-1" msprop:Generator_ColumnVarNameInTable="columnId" msprop:Generator_ColumnPropNameInRow="Id" msprop:Generator_ColumnPropNameInTable="IdColumn" msprop:Generator_UserColumnName="Id" type="xs:int" />
              <xs:element name="StudentID" msprop:Generator_ColumnVarNameInTable="columnStudentID" msprop:Generator_ColumnPropNameInRow="StudentID" msprop:Generator_ColumnPropNameInTable="StudentIDColumn" msprop:Generator_UserColumnName="StudentID" type="xs:int" />
              <xs:element name="FirstName" msprop:Generator_ColumnVarNameInTable="columnFirstName" msprop:Generator_ColumnPropNameInRow="FirstName" msprop:Generator_ColumnPropNameInTable="FirstNameColumn" msprop:Generator_UserColumnName="FirstName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="MiddleName" msprop:Generator_ColumnVarNameInTable="columnMiddleName" msprop:Generator_ColumnPropNameInRow="MiddleName" msprop:Generator_ColumnPropNameInTable="MiddleNameColumn" msprop:Generator_UserColumnName="MiddleName" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="LastName" msprop:Generator_ColumnVarNameInTable="columnLastName" msprop:Generator_ColumnPropNameInRow="LastName" msprop:Generator_ColumnPropNameInTable="LastNameColumn" msprop:Generator_UserColumnName="LastName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="SchoolEmail" msprop:Generator_ColumnVarNameInTable="columnSchoolEmail" msprop:Generator_ColumnPropNameInRow="SchoolEmail" msprop:Generator_ColumnPropNameInTable="SchoolEmailColumn" msprop:Generator_UserColumnName="SchoolEmail">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="OtherEmail" msprop:Generator_ColumnVarNameInTable="columnOtherEmail" msprop:Generator_ColumnPropNameInRow="OtherEmail" msprop:Generator_ColumnPropNameInTable="OtherEmailColumn" msprop:Generator_UserColumnName="OtherEmail">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Phone" msprop:Generator_ColumnVarNameInTable="columnPhone" msprop:Generator_ColumnPropNameInRow="Phone" msprop:Generator_ColumnPropNameInTable="PhoneColumn" msprop:Generator_UserColumnName="Phone">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Gender" msprop:Generator_ColumnVarNameInTable="columnGender" msprop:Generator_ColumnPropNameInRow="Gender" msprop:Generator_ColumnPropNameInTable="GenderColumn" msprop:Generator_UserColumnName="Gender" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="DegreeAtAdmission" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnDegreeAtAdmission" msprop:Generator_ColumnPropNameInRow="DegreeAtAdmission" msprop:Generator_ColumnPropNameInTable="DegreeAtAdmissionColumn" msprop:Generator_UserColumnName="DegreeAtAdmission" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="RaceEthnicity" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnRaceEthnicity" msprop:Generator_ColumnPropNameInRow="RaceEthnicity" msprop:Generator_ColumnPropNameInTable="RaceEthnicityColumn" msprop:Generator_UserColumnName="RaceEthnicity" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="RaceOther" msprop:Generator_ColumnVarNameInTable="columnRaceOther" msprop:Generator_ColumnPropNameInRow="RaceOther" msprop:Generator_ColumnPropNameInTable="RaceOtherColumn" msprop:Generator_UserColumnName="RaceOther" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="DegreeProgram" msprop:Generator_ColumnVarNameInTable="columnDegreeProgram" msprop:Generator_ColumnPropNameInRow="DegreeProgram" msprop:Generator_ColumnPropNameInTable="DegreeProgramColumn" msprop:Generator_UserColumnName="DegreeProgram" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Track" msprop:Generator_ColumnVarNameInTable="columnTrack" msprop:Generator_ColumnPropNameInRow="Track" msprop:Generator_ColumnPropNameInTable="TrackColumn" msprop:Generator_UserColumnName="Track" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Plan" msprop:Generator_ColumnVarNameInTable="columnPlan" msprop:Generator_ColumnPropNameInRow="Plan" msprop:Generator_ColumnPropNameInTable="PlanColumn" msprop:Generator_UserColumnName="Plan" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="DegreeStartSemester" msprop:Generator_ColumnVarNameInTable="columnDegreeStartSemester" msprop:Generator_ColumnPropNameInRow="DegreeStartSemester" msprop:Generator_ColumnPropNameInTable="DegreeStartSemesterColumn" msprop:Generator_UserColumnName="DegreeStartSemester" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="DegreeStartYear" msprop:Generator_ColumnVarNameInTable="columnDegreeStartYear" msprop:Generator_ColumnPropNameInRow="DegreeStartYear" msprop:Generator_ColumnPropNameInTable="DegreeStartYearColumn" msprop:Generator_UserColumnName="DegreeStartYear" type="xs:int" />
              <xs:element name="DegreeAwardedSemester" msprop:Generator_ColumnVarNameInTable="columnDegreeAwardedSemester" msprop:Generator_ColumnPropNameInRow="DegreeAwardedSemester" msprop:Generator_ColumnPropNameInTable="DegreeAwardedSemesterColumn" msprop:Generator_UserColumnName="DegreeAwardedSemester" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="DegreeAwardedYear" msprop:Generator_ColumnVarNameInTable="columnDegreeAwardedYear" msprop:Generator_ColumnPropNameInRow="DegreeAwardedYear" msprop:Generator_ColumnPropNameInTable="DegreeAwardedYearColumn" msprop:Generator_UserColumnName="DegreeAwardedYear" type="xs:int" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Coursework" msprop:Generator_TableClassName="CourseworkDataTable" msprop:Generator_TableVarName="tableCoursework" msprop:Generator_TablePropName="Coursework" msprop:Generator_RowDeletingName="CourseworkRowDeleting" msprop:Generator_RowChangingName="CourseworkRowChanging" msprop:Generator_RowEvHandlerName="CourseworkRowChangeEventHandler" msprop:Generator_RowDeletedName="CourseworkRowDeleted" msprop:Generator_UserTableName="Coursework" msprop:Generator_RowChangedName="CourseworkRowChanged" msprop:Generator_RowEvArgName="CourseworkRowChangeEvent" msprop:Generator_RowClassName="CourseworkRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="StudentID" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnStudentID" msprop:Generator_ColumnPropNameInRow="StudentID" msprop:Generator_ColumnPropNameInTable="StudentIDColumn" msprop:Generator_UserColumnName="StudentID" type="xs:int" minOccurs="0" />
              <xs:element name="Name" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Semester" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnSemester" msprop:Generator_ColumnPropNameInRow="Semester" msprop:Generator_ColumnPropNameInTable="SemesterColumn" msprop:Generator_UserColumnName="Semester" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Course" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnCourse" msprop:Generator_ColumnPropNameInRow="Course" msprop:Generator_ColumnPropNameInTable="CourseColumn" msprop:Generator_UserColumnName="Course" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Title" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnTitle" msprop:Generator_ColumnPropNameInRow="Title" msprop:Generator_ColumnPropNameInTable="TitleColumn" msprop:Generator_UserColumnName="Title" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Grade" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnGrade" msprop:Generator_ColumnPropNameInRow="Grade" msprop:Generator_ColumnPropNameInTable="GradeColumn" msprop:Generator_UserColumnName="Grade" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Credits" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnCredits" msprop:Generator_ColumnPropNameInRow="Credits" msprop:Generator_ColumnPropNameInTable="CreditsColumn" msprop:Generator_UserColumnName="Credits" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="13" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Performance" msprop:Generator_TableClassName="PerformanceDataTable" msprop:Generator_TableVarName="tablePerformance" msprop:Generator_RowChangedName="PerformanceRowChanged" msprop:Generator_TablePropName="Performance" msprop:Generator_RowDeletingName="PerformanceRowDeleting" msprop:Generator_RowChangingName="PerformanceRowChanging" msprop:Generator_RowEvHandlerName="PerformanceRowChangeEventHandler" msprop:Generator_RowDeletedName="PerformanceRowDeleted" msprop:Generator_RowClassName="PerformanceRow" msprop:Generator_UserTableName="Performance" msprop:Generator_RowEvArgName="PerformanceRowChangeEvent">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="StudentID" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnStudentID" msprop:Generator_ColumnPropNameInRow="StudentID" msprop:Generator_ColumnPropNameInTable="StudentIDColumn" msprop:Generator_UserColumnName="StudentID" type="xs:int" minOccurs="0" />
              <xs:element name="Name" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Category" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnCategory" msprop:Generator_ColumnPropNameInRow="Category" msprop:Generator_ColumnPropNameInTable="CategoryColumn" msprop:Generator_UserColumnName="Category" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Information" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnInformation" msprop:Generator_ColumnPropNameInRow="Information" msprop:Generator_ColumnPropNameInTable="InformationColumn" msprop:Generator_UserColumnName="Information" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="StatusType" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnStatusType" msprop:Generator_ColumnPropNameInRow="StatusType" msprop:Generator_ColumnPropNameInTable="StatusTypeColumn" msprop:Generator_UserColumnName="StatusType" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="16" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="StatusDescription" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnStatusDescription" msprop:Generator_ColumnPropNameInRow="StatusDescription" msprop:Generator_ColumnPropNameInTable="StatusDescriptionColumn" msprop:Generator_UserColumnName="StatusDescription" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Requirements" msprop:Generator_TableClassName="RequirementsDataTable" msprop:Generator_TableVarName="tableRequirements" msprop:Generator_RowChangedName="RequirementsRowChanged" msprop:Generator_TablePropName="Requirements" msprop:Generator_RowDeletingName="RequirementsRowDeleting" msprop:Generator_RowChangingName="RequirementsRowChanging" msprop:Generator_RowEvHandlerName="RequirementsRowChangeEventHandler" msprop:Generator_RowDeletedName="RequirementsRowDeleted" msprop:Generator_RowClassName="RequirementsRow" msprop:Generator_UserTableName="Requirements" msprop:Generator_RowEvArgName="RequirementsRowChangeEvent">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Name" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Advisor" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnAdvisor" msprop:Generator_ColumnPropNameInRow="Advisor" msprop:Generator_ColumnPropNameInTable="AdvisorColumn" msprop:Generator_UserColumnName="Advisor" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="StudentID" msprop:Generator_ColumnVarNameInTable="columnStudentID" msprop:Generator_ColumnPropNameInRow="StudentID" msprop:Generator_ColumnPropNameInTable="StudentIDColumn" msprop:Generator_UserColumnName="StudentID" type="xs:int" minOccurs="0" />
              <xs:element name="QualifiyingExamination" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnQualifiyingExamination" msprop:Generator_ColumnPropNameInRow="QualifiyingExamination" msprop:Generator_ColumnPropNameInTable="QualifiyingExaminationColumn" msprop:Generator_UserColumnName="QualifiyingExamination" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="ResearchTopic" msprop:Generator_ColumnVarNameInTable="columnResearchTopic" msprop:Generator_ColumnPropNameInRow="ResearchTopic" msprop:Generator_ColumnPropNameInTable="ResearchTopicColumn" msprop:Generator_UserColumnName="ResearchTopic" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="ProposalPresentation" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnProposalPresentation" msprop:Generator_ColumnPropNameInRow="ProposalPresentation" msprop:Generator_ColumnPropNameInTable="ProposalPresentationColumn" msprop:Generator_UserColumnName="ProposalPresentation" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="ComprehensiveExam" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnComprehensiveExam" msprop:Generator_ColumnPropNameInRow="ComprehensiveExam" msprop:Generator_ColumnPropNameInTable="ComprehensiveExamColumn" msprop:Generator_UserColumnName="ComprehensiveExam" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="CommitteeMembers" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnCommitteeMembers" msprop:Generator_ColumnPropNameInRow="CommitteeMembers" msprop:Generator_ColumnPropNameInTable="CommitteeMembersColumn" msprop:Generator_UserColumnName="CommitteeMembers" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="FinalDefenseTitle" msprop:Generator_ColumnVarNameInTable="columnFinalDefenseTitle" msprop:Generator_ColumnPropNameInRow="FinalDefenseTitle" msprop:Generator_ColumnPropNameInTable="FinalDefenseTitleColumn" msprop:Generator_UserColumnName="FinalDefenseTitle" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="FinalDefenseResult" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnFinalDefenseResult" msprop:Generator_ColumnPropNameInRow="FinalDefenseResult" msprop:Generator_ColumnPropNameInTable="FinalDefenseResultColumn" msprop:Generator_UserColumnName="FinalDefenseResult" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="ManuscriptFile" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnManuscriptFile" msprop:Generator_ColumnPropNameInRow="ManuscriptFile" msprop:Generator_ColumnPropNameInTable="ManuscriptFileColumn" msprop:Generator_UserColumnName="ManuscriptFile" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="DegreeAwarded" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnDegreeAwarded" msprop:Generator_ColumnPropNameInRow="DegreeAwarded" msprop:Generator_ColumnPropNameInTable="DegreeAwardedColumn" msprop:Generator_UserColumnName="DegreeAwarded" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Postgraduation" msprop:Generator_TableClassName="PostgraduationDataTable" msprop:Generator_TableVarName="tablePostgraduation" msprop:Generator_RowChangedName="PostgraduationRowChanged" msprop:Generator_TablePropName="Postgraduation" msprop:Generator_RowDeletingName="PostgraduationRowDeleting" msprop:Generator_RowChangingName="PostgraduationRowChanging" msprop:Generator_RowEvHandlerName="PostgraduationRowChangeEventHandler" msprop:Generator_RowDeletedName="PostgraduationRowDeleted" msprop:Generator_RowClassName="PostgraduationRow" msprop:Generator_UserTableName="Postgraduation" msprop:Generator_RowEvArgName="PostgraduationRowChangeEvent">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="StudentID" msprop:Generator_ColumnVarNameInTable="columnStudentID" msprop:Generator_ColumnPropNameInRow="StudentID" msprop:Generator_ColumnPropNameInTable="StudentIDColumn" msprop:Generator_UserColumnName="StudentID" type="xs:int" />
              <xs:element name="Name" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Email" msprop:Generator_ColumnVarNameInTable="columnEmail" msprop:Generator_ColumnPropNameInRow="Email" msprop:Generator_ColumnPropNameInTable="EmailColumn" msprop:Generator_UserColumnName="Email">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Phone" msprop:Generator_ColumnVarNameInTable="columnPhone" msprop:Generator_ColumnPropNameInRow="Phone" msprop:Generator_ColumnPropNameInTable="PhoneColumn" msprop:Generator_UserColumnName="Phone">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="CVs" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnCVs" msprop:Generator_ColumnPropNameInRow="CVs" msprop:Generator_ColumnPropNameInTable="CVsColumn" msprop:Generator_UserColumnName="CVs" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="EmploymentHistory" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnEmploymentHistory" msprop:Generator_ColumnPropNameInRow="EmploymentHistory" msprop:Generator_ColumnPropNameInTable="EmploymentHistoryColumn" msprop:Generator_UserColumnName="EmploymentHistory" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="PublicationsPeerReviewedJournalonlyPublished" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnPublicationsPeerReviewedJournalonlyPublished" msprop:Generator_ColumnPropNameInRow="PublicationsPeerReviewedJournalonlyPublished" msprop:Generator_ColumnPropNameInTable="PublicationsPeerReviewedJournalonlyPublishedColumn" msprop:Generator_UserColumnName="PublicationsPeerReviewedJournalonlyPublished" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="TotalNumberofPublications" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnTotalNumberofPublications" msprop:Generator_ColumnPropNameInRow="TotalNumberofPublications" msprop:Generator_ColumnPropNameInTable="TotalNumberofPublicationsColumn" msprop:Generator_UserColumnName="TotalNumberofPublications" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="376" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Grants" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnGrants" msprop:Generator_ColumnPropNameInRow="Grants" msprop:Generator_ColumnPropNameInTable="GrantsColumn" msprop:Generator_UserColumnName="Grants" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="TotalNumberofGrants" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnTotalNumberofGrants" msprop:Generator_ColumnPropNameInRow="TotalNumberofGrants" msprop:Generator_ColumnPropNameInTable="TotalNumberofGrantsColumn" msprop:Generator_UserColumnName="TotalNumberofGrants" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="133" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="HonorsAwards" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnHonorsAwards" msprop:Generator_ColumnPropNameInRow="HonorsAwards" msprop:Generator_ColumnPropNameInTable="HonorsAwardsColumn" msprop:Generator_UserColumnName="HonorsAwards" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="2147483647" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="TotalNumberofHonorsAwards" msdata:ReadOnly="true" msprop:Generator_ColumnVarNameInTable="columnTotalNumberofHonorsAwards" msprop:Generator_ColumnPropNameInRow="TotalNumberofHonorsAwards" msprop:Generator_ColumnPropNameInTable="TotalNumberofHonorsAwardsColumn" msprop:Generator_UserColumnName="TotalNumberofHonorsAwards" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="133" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:Background" />
      <xs:field xpath="mstns:Id" />
    </xs:unique>
  </xs:element>
</xs:schema>